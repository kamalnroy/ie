<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10300.18.0227.0849                               -->
<workbook original-version='10.3' source-build='10.3.9 (10300.18.0227.0849)' source-platform='win' version='10.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='f_commoditymarketprices+ (testglobalfoodprices)' inline='true' name='federated.1io3ziw0gciwcs1di11yq03dnewt' version='10.3'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='mysql.1s6mk8b0c6f6l210atn5111efzho'>
            <connection class='mysql' dbname='testglobalfoodprices' odbc-native-protocol='' one-time-sql='' port='3306' server='localhost' source-charset='' username='root' />
          </named-connection>
        </named-connections>
        <relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[f_commoditymarketprices].[d_unittype_id]' />
              <expression op='[d_unit].[unit_id]' />
            </expression>
          </clause>
          <relation join='inner' type='join'>
            <clause type='join'>
              <expression op='='>
                <expression op='[f_commoditymarketprices].[d_pricetype_id]' />
                <expression op='[d_pricetype].[pricetype_id]' />
              </expression>
            </clause>
            <relation join='inner' type='join'>
              <clause type='join'>
                <expression op='='>
                  <expression op='[f_commoditymarketprices].[d_market_id]' />
                  <expression op='[d_market].[market_id]' />
                </expression>
              </clause>
              <relation join='inner' type='join'>
                <clause type='join'>
                  <expression op='='>
                    <expression op='[f_commoditymarketprices].[d_date_id]' />
                    <expression op='[d_date].[date_id]' />
                  </expression>
                </clause>
                <relation join='inner' type='join'>
                  <clause type='join'>
                    <expression op='='>
                      <expression op='[f_commoditymarketprices].[d_currency_id]' />
                      <expression op='[d_currency].[currency_id]' />
                    </expression>
                  </clause>
                  <relation join='inner' type='join'>
                    <clause type='join'>
                      <expression op='='>
                        <expression op='[f_commoditymarketprices].[d_commodity_id]' />
                        <expression op='[d_commodity].[commodity_id]' />
                      </expression>
                    </clause>
                    <relation connection='mysql.1s6mk8b0c6f6l210atn5111efzho' name='f_commoditymarketprices' table='[f_commoditymarketprices]' type='table' />
                    <relation connection='mysql.1s6mk8b0c6f6l210atn5111efzho' name='d_commodity' table='[d_commodity]' type='table' />
                  </relation>
                  <relation connection='mysql.1s6mk8b0c6f6l210atn5111efzho' name='d_currency' table='[d_currency]' type='table' />
                </relation>
                <relation connection='mysql.1s6mk8b0c6f6l210atn5111efzho' name='d_date' table='[d_date]' type='table' />
              </relation>
              <relation connection='mysql.1s6mk8b0c6f6l210atn5111efzho' name='d_market' table='[d_market]' type='table' />
            </relation>
            <relation connection='mysql.1s6mk8b0c6f6l210atn5111efzho' name='d_pricetype' table='[d_pricetype]' type='table' />
          </relation>
          <relation connection='mysql.1s6mk8b0c6f6l210atn5111efzho' name='d_unit' table='[d_unit]' type='table' />
        </relation>
        <cols>
          <map key='[commodity_id]' value='[d_commodity].[commodity_id]' />
          <map key='[commodity_name]' value='[d_commodity].[commodity_name]' />
          <map key='[country (d_market)]' value='[d_market].[country]' />
          <map key='[country]' value='[d_currency].[country]' />
          <map key='[currency_id]' value='[d_currency].[currency_id]' />
          <map key='[currency_name]' value='[d_currency].[currency_name]' />
          <map key='[d_commodity_id]' value='[f_commoditymarketprices].[d_commodity_id]' />
          <map key='[d_currency_id]' value='[f_commoditymarketprices].[d_currency_id]' />
          <map key='[d_date_id]' value='[f_commoditymarketprices].[d_date_id]' />
          <map key='[d_market_id]' value='[f_commoditymarketprices].[d_market_id]' />
          <map key='[d_pricetype_id]' value='[f_commoditymarketprices].[d_pricetype_id]' />
          <map key='[d_unittype_id]' value='[f_commoditymarketprices].[d_unittype_id]' />
          <map key='[date_id]' value='[d_date].[date_id]' />
          <map key='[description (d_commodity)]' value='[d_commodity].[description]' />
          <map key='[description (d_currency)]' value='[d_currency].[description]' />
          <map key='[description (d_date)]' value='[d_date].[description]' />
          <map key='[description (d_market)]' value='[d_market].[description]' />
          <map key='[description (d_pricetype)]' value='[d_pricetype].[description]' />
          <map key='[description (d_unit)]' value='[d_unit].[description]' />
          <map key='[description]' value='[f_commoditymarketprices].[description]' />
          <map key='[id]' value='[f_commoditymarketprices].[id]' />
          <map key='[market_id]' value='[d_market].[market_id]' />
          <map key='[market_name]' value='[d_market].[market_name]' />
          <map key='[market_price]' value='[f_commoditymarketprices].[market_price]' />
          <map key='[market_price_source]' value='[f_commoditymarketprices].[market_price_source]' />
          <map key='[month]' value='[d_date].[month]' />
          <map key='[pricetype_id]' value='[d_pricetype].[pricetype_id]' />
          <map key='[pricetype_name]' value='[d_pricetype].[pricetype_name]' />
          <map key='[province]' value='[d_market].[province]' />
          <map key='[unit_id]' value='[d_unit].[unit_id]' />
          <map key='[unit_name]' value='[d_unit].[unit_name]' />
          <map key='[year]' value='[d_date].[year]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[f_commoditymarketprices]</parent-name>
            <remote-alias>id</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>d_date_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[d_date_id]</local-name>
            <parent-name>[f_commoditymarketprices]</parent-name>
            <remote-alias>d_date_id</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>d_commodity_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[d_commodity_id]</local-name>
            <parent-name>[f_commoditymarketprices]</parent-name>
            <remote-alias>d_commodity_id</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>d_currency_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[d_currency_id]</local-name>
            <parent-name>[f_commoditymarketprices]</parent-name>
            <remote-alias>d_currency_id</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>d_market_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[d_market_id]</local-name>
            <parent-name>[f_commoditymarketprices]</parent-name>
            <remote-alias>d_market_id</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>d_pricetype_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[d_pricetype_id]</local-name>
            <parent-name>[f_commoditymarketprices]</parent-name>
            <remote-alias>d_pricetype_id</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>d_unittype_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[d_unittype_id]</local-name>
            <parent-name>[f_commoditymarketprices]</parent-name>
            <remote-alias>d_unittype_id</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>market_price</remote-name>
            <remote-type>3</remote-type>
            <local-name>[market_price]</local-name>
            <parent-name>[f_commoditymarketprices]</parent-name>
            <remote-alias>market_price</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>market_price_source</remote-name>
            <remote-type>130</remote-type>
            <local-name>[market_price_source]</local-name>
            <parent-name>[f_commoditymarketprices]</parent-name>
            <remote-alias>market_price_source</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>128</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>description</remote-name>
            <remote-type>130</remote-type>
            <local-name>[description]</local-name>
            <parent-name>[f_commoditymarketprices]</parent-name>
            <remote-alias>description</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>128</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>commodity_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[commodity_id]</local-name>
            <parent-name>[d_commodity]</parent-name>
            <remote-alias>commodity_id</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>commodity_name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[commodity_name]</local-name>
            <parent-name>[d_commodity]</parent-name>
            <remote-alias>commodity_name</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>64</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>description</remote-name>
            <remote-type>130</remote-type>
            <local-name>[description (d_commodity)]</local-name>
            <parent-name>[d_commodity]</parent-name>
            <remote-alias>description</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>128</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>currency_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[currency_id]</local-name>
            <parent-name>[d_currency]</parent-name>
            <remote-alias>currency_id</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>currency_name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[currency_name]</local-name>
            <parent-name>[d_currency]</parent-name>
            <remote-alias>currency_name</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>64</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[d_currency]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>64</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>description</remote-name>
            <remote-type>130</remote-type>
            <local-name>[description (d_currency)]</local-name>
            <parent-name>[d_currency]</parent-name>
            <remote-alias>description</remote-alias>
            <ordinal>19</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>128</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[date_id]</local-name>
            <parent-name>[d_date]</parent-name>
            <remote-alias>date_id</remote-alias>
            <ordinal>21</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>month</remote-name>
            <remote-type>3</remote-type>
            <local-name>[month]</local-name>
            <parent-name>[d_date]</parent-name>
            <remote-alias>month</remote-alias>
            <ordinal>22</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[year]</local-name>
            <parent-name>[d_date]</parent-name>
            <remote-alias>year</remote-alias>
            <ordinal>23</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>description</remote-name>
            <remote-type>130</remote-type>
            <local-name>[description (d_date)]</local-name>
            <parent-name>[d_date]</parent-name>
            <remote-alias>description</remote-alias>
            <ordinal>24</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>128</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>market_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[market_id]</local-name>
            <parent-name>[d_market]</parent-name>
            <remote-alias>market_id</remote-alias>
            <ordinal>26</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>market_name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[market_name]</local-name>
            <parent-name>[d_market]</parent-name>
            <remote-alias>market_name</remote-alias>
            <ordinal>27</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>64</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>province</remote-name>
            <remote-type>130</remote-type>
            <local-name>[province]</local-name>
            <parent-name>[d_market]</parent-name>
            <remote-alias>province</remote-alias>
            <ordinal>28</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>64</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country (d_market)]</local-name>
            <parent-name>[d_market]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>29</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>64</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>description</remote-name>
            <remote-type>130</remote-type>
            <local-name>[description (d_market)]</local-name>
            <parent-name>[d_market]</parent-name>
            <remote-alias>description</remote-alias>
            <ordinal>30</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>128</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pricetype_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[pricetype_id]</local-name>
            <parent-name>[d_pricetype]</parent-name>
            <remote-alias>pricetype_id</remote-alias>
            <ordinal>32</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pricetype_name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[pricetype_name]</local-name>
            <parent-name>[d_pricetype]</parent-name>
            <remote-alias>pricetype_name</remote-alias>
            <ordinal>33</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>64</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>description</remote-name>
            <remote-type>130</remote-type>
            <local-name>[description (d_pricetype)]</local-name>
            <parent-name>[d_pricetype]</parent-name>
            <remote-alias>description</remote-alias>
            <ordinal>34</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>128</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>unit_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[unit_id]</local-name>
            <parent-name>[d_unit]</parent-name>
            <remote-alias>unit_id</remote-alias>
            <ordinal>36</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>unit_name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[unit_name]</local-name>
            <parent-name>[d_unit]</parent-name>
            <remote-alias>unit_name</remote-alias>
            <ordinal>37</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>64</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>description</remote-name>
            <remote-type>130</remote-type>
            <local-name>[description (d_unit)]</local-name>
            <parent-name>[d_unit]</parent-name>
            <remote-alias>description</remote-alias>
            <ordinal>38</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>128</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='CalculatedDate' datatype='date' name='[Calculation_592504875785900033]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='MAKEDATE([year],[month],1)' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Commodity Id' datatype='integer' name='[commodity_id]' role='dimension' type='ordinal' />
      <column caption='Commodity Name' datatype='string' name='[commodity_name]' role='dimension' type='nominal' />
      <column caption='Country (D Market)' datatype='string' name='[country (d_market)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <semantic-values semantic-role='[Country].[Name]'>
          <semantic-value key='&quot;Congo&quot;' value='&quot;Congo (Kinshasa)&quot;' />
          <semantic-value key='&quot;State of Palestine&quot;' value='&quot;Palestinian Territories&quot;' />
        </semantic-values>
      </column>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Currency Id' datatype='integer' name='[currency_id]' role='dimension' type='ordinal' />
      <column caption='Currency Name' datatype='string' name='[currency_name]' role='dimension' type='nominal' />
      <column aggregation='Sum' caption='D Commodity Id' datatype='integer' name='[d_commodity_id]' role='dimension' type='ordinal' />
      <column caption='D Currency Id' datatype='integer' name='[d_currency_id]' role='dimension' type='ordinal' />
      <column aggregation='Sum' caption='D Date Id' datatype='integer' name='[d_date_id]' role='dimension' type='ordinal' />
      <column aggregation='Sum' caption='D Market Id' datatype='integer' name='[d_market_id]' role='dimension' type='ordinal' />
      <column aggregation='Sum' caption='D Pricetype Id' datatype='integer' name='[d_pricetype_id]' role='dimension' type='ordinal' />
      <column aggregation='Sum' caption='D Unittype Id' datatype='integer' name='[d_unittype_id]' role='dimension' type='ordinal' />
      <column aggregation='Sum' caption='Date Id' datatype='integer' name='[date_id]' role='dimension' type='ordinal' />
      <column caption='Description (D Commodity)' datatype='string' name='[description (d_commodity)]' role='dimension' type='nominal' />
      <column caption='Description (D Currency)' datatype='string' name='[description (d_currency)]' role='dimension' type='nominal' />
      <column caption='Description (D Date)' datatype='string' name='[description (d_date)]' role='dimension' type='nominal' />
      <column caption='Description (D Market)' datatype='string' name='[description (d_market)]' role='dimension' type='nominal' />
      <column caption='Description (D Pricetype)' datatype='string' name='[description (d_pricetype)]' role='dimension' type='nominal' />
      <column caption='Description (D Unit)' datatype='string' name='[description (d_unit)]' role='dimension' type='nominal' />
      <column caption='Description' datatype='string' name='[description]' role='dimension' type='nominal' />
      <column caption='Id' datatype='integer' name='[id]' role='dimension' type='ordinal' />
      <column aggregation='Sum' caption='Market Id' datatype='integer' name='[market_id]' role='dimension' type='ordinal' />
      <column caption='Market Name' datatype='string' name='[market_name]' role='dimension' type='nominal' />
      <column caption='Market Price' datatype='integer' name='[market_price]' role='measure' type='quantitative' />
      <column caption='Market Price Source' datatype='string' name='[market_price_source]' role='dimension' type='nominal' />
      <column caption='Month' datatype='integer' name='[month]' role='dimension' type='quantitative' />
      <column aggregation='Sum' caption='Pricetype Id' datatype='integer' name='[pricetype_id]' role='dimension' type='ordinal' />
      <column caption='Pricetype Name' datatype='string' name='[pricetype_name]' role='dimension' type='nominal' />
      <column caption='Province' datatype='string' name='[province]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column aggregation='Sum' caption='Unit Id' datatype='integer' name='[unit_id]' role='dimension' type='ordinal' />
      <column caption='Unit Name' datatype='string' name='[unit_name]' role='dimension' type='nominal' />
      <column caption='Year' datatype='integer' name='[year]' role='dimension' type='quantitative' />
      <column-instance column='[commodity_name]' derivation='None' name='[none:commodity_name:nk]' pivot='key' type='nominal' />
      <column-instance column='[country (d_market)]' derivation='None' name='[none:country (d_market):nk]' pivot='key' type='nominal' />
      <column-instance column='[province]' derivation='None' name='[none:province:nk]' pivot='key' type='nominal' />
      <layout dim-ordering='alphabetic' dim-percentage='0.589212' measure-ordering='alphabetic' measure-percentage='0.410788' rowDisplayCount='1000' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:province:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Assam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Khulna&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mizoram&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Nagaland&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;$Uttarakhand&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tamil Nadu&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Gujarat&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sylhet&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Barisal&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bihar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Andaman and Nicobar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tripura&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Maharashtra&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;$Chandigarh&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Orissa&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Far Western&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kerala&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Andhra Pradesh&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Uttar Pradesh&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Dhaka&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Haryana&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Himachal Pradesh&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Madhya Pradesh&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Meghalaya&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Western&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Delhi&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rajshahi&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Arunachal Pradesh&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mid Western&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;West Bengal&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;$Jharkhand&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Punjab&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Eastern&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Karnataka&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Central&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Chittagong&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Goa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;$Puducherry&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Rajasthan&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:commodity_name:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Beans (catarino)&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Blackberry&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cassava (chikwangue)&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cocoa (powder, not sweetened)&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Fish (fresh)&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Groundnuts (Mix)&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Maize&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Meat (beef, second quality)&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Milk&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Oil (palm)&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Peas (yellow, split)&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Rice (estaquilla)&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Rice (ordinary, first quality)&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sour cream&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Transport (public)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Apples&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Beans (red)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Broccoli&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Cheese (picon)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Exchange rate&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Fuel (kerosene)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ghee (vanaspati)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lettuce&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Maize meal (white, roller)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Meat (lamb)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Oil (cooking)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Parsley&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Poultry&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Rice (long grain, imported)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sugar (white)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Tea&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Wheat flour&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bananas (medium size)&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Beans (sugar) &quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cabbage&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Chickpeas (local)&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Fish (bonga)&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ghee (artificial)&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Lentils (urad)&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Meat (beef, canned)&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Meat (pork, second quality)&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Oil (mixed, imported)&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Peas (dry)&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Rice (basmati, broken)&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Rice (medium grain, imported)&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sorghum (red)&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Yam (florido)&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Beans (haricot)&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bread (common)&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cassava flour&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cowpeas&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Fish (smoked)&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Groundnuts (unshelled)&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Maize (yellow)&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Meat (buffalo, second quality)&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Milk (non-pasteurized)&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Plantains (apentu)&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Potatoes&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Rice (good quality)&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Rice (paddy)&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sugar (brown, imported)&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Yeast&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Beans (dry)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bread&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cassava (cossette)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Coffee&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fish (red snapper)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Groundnuts (paste)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Maize (imported)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Meat (beef, without bones)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Milk (camel)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Oil (soybean)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Peas (yellow)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Rice (glutinous, first quality)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Rice (ordinary, second quality)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Soybeans&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Wage (non-qualified labour, non-agricultural)&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Beans&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Beans (white)&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Carrots&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Chili (green)&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Fish (canned)&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ghee (natural)&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Meat (beef, chops with bones)&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Meat (pork, with fat)&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Milk (pasteurized)&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Oil (mixed)&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Peas (fresh)&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Rice (carolina 2da)&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Rice (medium grain)&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sorghum (taghalit)&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tomatoes (greenhouse)&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Beans (niebe)&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bread (shop)&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Cheese&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Eggs&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Fuel (diesel)&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Livestock (sheep, one-year-old alive female)&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Maize meal (white, breakfast)&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Meat (goat, with bones)&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Noodles (short)&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oranges (big size)&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Potatoes (medium size)&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Rice (imported)&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Rice (white)&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tomatoes&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Wheat flour (locally processed)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Apples (red)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Beans (silk red)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Buckwheat grits&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Cheese (white, boiled)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Fuel (petrol-gasoline)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lentils&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Livestock (cattle)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Maize meal (white, with bran)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Meat (mixed, sausage)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Oil (cotton)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Passion fruit&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Pulses&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Rice (long grain)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sesame&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Yam&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Beans (magnum)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bread (pita)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cauliflower&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dates&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Fish (tuna, canned)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lentils (imported)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Maize meal&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Meat (chicken, whole)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Millet&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Onions (red)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Potatoes (Irish, imilla)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Rice (imported, Indian)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Rice (tchako)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sugar (jaggery/gur)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Wheat flour (imported)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Beans (black)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Beans(mash)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cashew&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Chili (red)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Fish (catfish)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Livestock (Goat)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Meat (beef, first quality)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Meat (pork)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Oil (groundnut)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Oil (vegetable, local)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Peas (green, dry)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Rice (coarse)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Rice (milled 80-20)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sorghum (white)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tomatoes (paste)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Beans (kidney red)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bread (first grade flour)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cassava leaves&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cucumbers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Fish (snake head)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Guava&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Maize flour&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Meat (camel)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Oil (olive)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Oil (vegetable)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Rice&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Rice (high quality, local)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Rice (red nadu)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sugar (brown, loaf)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Yogurt&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Beans (kidney white)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bread (high grade flour)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cassava meal&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cucumbers (greenhouse)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Fish (tilapia, farmed)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Labaneh&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Maize flour (imported)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Meat (chicken, broiler)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Milk (powder, infant formula)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Potatoes (black)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Rice (high quality)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Rice (regular, milled)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Salt (iodised)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sugar (brown, local)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Wheat flour (first grade)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Beans (mung)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bread (rye)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Charcoal&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Eggplants&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Fonio&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Livestock (pig)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Maize meal (local)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Meat (chicken)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Millet (white)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Onions (white)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Potatoes (Irish)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Rice (imported, Tanzanian)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Rice (white, imported)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Tea (black)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Wheat flour (local)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Beans (red, fresh)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bread (wheat)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cheese (dry)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Eggs (white, AA)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Fuel (gas)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Livestock (sheep, two-year-old male)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Maize meal (white, first grade)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Meat (goat)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Oil&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Papaya&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Potatoes (unica)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Rice (local)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Salt&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Tamarillos/tree tomatoes&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Wheat&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Beans (fava, dry)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bread (bakery)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cassava (dry)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Coffee (instant)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Fish (salted)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Groundnuts (shelled)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Maize (local)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Meat (beef)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Milk (condensed)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Oil (sunflower)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Peppers (green)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rice (glutinous, second quality)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rice (ordinary, unmilled)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Spinach&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Wage (non-qualified labour)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Beans (butter)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Beetroots&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cassava&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cocoa&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Fish (dry)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Groundnuts (large, shelled)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Livestock (Sheep)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Meat (beef, minced)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Meat (veal)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Oil (mustard)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Peas (split, dry)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Rice (denikassia, imported)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Rice (mixed, low quality)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sorghum flour&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tortilla (maize)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Avocados&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Beans (string)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bulgur&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chickpeas&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Exchange rate (unofficial)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Fat (salo)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Garlic&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lentils (masur)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Maize meal (white, without bran) &quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Meat (mutton)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Oil (vegetable, imported)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Pasta&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Pumpkin&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rice (low quality, local)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sorghum&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tea (green)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Beans (kidney)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bread (khoboz)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cassava meal (gari)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Curd&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Fish (tilapia)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Livestock (hen)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Maize flour (white)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Meat (chicken, frozen)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Milk (powder)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Onions (dry, local)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Potatoes (Dutch)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Rice (small grain, imported)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sugar&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sugar (brown)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Wheat flour (high quality)&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Beans (green, fresh)&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bread (brown)&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cassava (fresh)&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cornstarch&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Fish (sardine, canned)&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Groundnuts (small, shelled)&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Maize (white)&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Meat (buffalo, first quality)&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Milk (cow, pasteurized)&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Onions&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Plantains&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Rice (glutinous, unmilled)&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Rice (paddy, long grain, local)&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sweet potatoes&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Wage (qualified labour)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bananas&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Beans (sugar-red)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Butter&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Chickpeas (imported)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Fish (appolo)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Garlic (small)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Lentils (moong)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mangoes&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Meat (pork, first quality)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Oil (maize)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Peanut&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Rice (imported, Egyptian)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Rice (low quality)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sorghum (food aid)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tea (sahm)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Zucchini&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:country (d_market):nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;India&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <field-sort-info field-sort-order-type='custom-order'>
        <field-sort-custom-order field='commodity_id' />
        <field-sort-custom-order field='commodity_name' />
        <field-sort-custom-order field='description (d_commodity)' />
        <field-sort-custom-order field='currency_id' />
        <field-sort-custom-order field='currency_name' />
        <field-sort-custom-order field='country' />
        <field-sort-custom-order field='description (d_currency)' />
        <field-sort-custom-order field='date_id' />
        <field-sort-custom-order field='month' />
        <field-sort-custom-order field='year' />
        <field-sort-custom-order field='Calculation_592504875785900033' />
        <field-sort-custom-order field='description (d_date)' />
        <field-sort-custom-order field='market_id' />
        <field-sort-custom-order field='market_name' />
        <field-sort-custom-order field='province' />
        <field-sort-custom-order field='country (d_market)' />
        <field-sort-custom-order field='description (d_market)' />
        <field-sort-custom-order field='pricetype_id' />
        <field-sort-custom-order field='pricetype_name' />
        <field-sort-custom-order field='description (d_pricetype)' />
        <field-sort-custom-order field='unit_id' />
        <field-sort-custom-order field='unit_name' />
        <field-sort-custom-order field='description (d_unit)' />
        <field-sort-custom-order field='id' />
        <field-sort-custom-order field='d_date_id' />
        <field-sort-custom-order field='d_commodity_id' />
        <field-sort-custom-order field='d_currency_id' />
        <field-sort-custom-order field='d_market_id' />
        <field-sort-custom-order field='d_pricetype_id' />
        <field-sort-custom-order field='d_unittype_id' />
        <field-sort-custom-order field='market_price' />
        <field-sort-custom-order field='market_price_source' />
        <field-sort-custom-order field='description' />
      </field-sort-info>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Average Market Prices of grains and potatoes in SE Asian countries'>
      <table>
        <view>
          <datasources>
            <datasource caption='f_commoditymarketprices+ (testglobalfoodprices)' name='federated.1io3ziw0gciwcs1di11yq03dnewt' />
          </datasources>
          <datasource-dependencies datasource='federated.1io3ziw0gciwcs1di11yq03dnewt'>
            <column-instance column='[market_price]' derivation='Avg' name='[avg:market_price:qk]' pivot='key' type='quantitative' />
            <column caption='Commodity Name' datatype='string' name='[commodity_name]' role='dimension' type='nominal' />
            <column caption='Country (D Market)' datatype='string' name='[country (d_market)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Congo&quot;' value='&quot;Congo (Kinshasa)&quot;' />
                <semantic-value key='&quot;State of Palestine&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column caption='Market Price' datatype='integer' name='[market_price]' role='measure' type='quantitative' />
            <column-instance column='[commodity_name]' derivation='None' name='[none:commodity_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[country (d_market)]' derivation='None' name='[none:country (d_market):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Lentils&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Lentils (masur)&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Lentils (moong)&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Lentils (urad)&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Onions&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Onions (dry, local)&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Onions (red)&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Onions (white)&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Potatoes&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Rice&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Wheat&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;Sri Lanka&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</column>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#4e79a7' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk] / [federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk])</rows>
        <cols>[federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Average Price of Onions in different provinces of India and Bangladesh'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Average Price of Onions</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='f_commoditymarketprices+ (testglobalfoodprices)' name='federated.1io3ziw0gciwcs1di11yq03dnewt' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1io3ziw0gciwcs1di11yq03dnewt'>
            <column-instance column='[market_price]' derivation='Avg' name='[avg:market_price:qk]' pivot='key' type='quantitative' />
            <column caption='Commodity Name' datatype='string' name='[commodity_name]' role='dimension' type='nominal' />
            <column caption='Country (D Market)' datatype='string' name='[country (d_market)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Congo&quot;' value='&quot;Congo (Kinshasa)&quot;' />
                <semantic-value key='&quot;State of Palestine&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column caption='Market Price' datatype='integer' name='[market_price]' role='measure' type='quantitative' />
            <column-instance column='[commodity_name]' derivation='None' name='[none:commodity_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[country (d_market)]' derivation='None' name='[none:country (d_market):nk]' pivot='key' type='nominal' />
            <column-instance column='[province]' derivation='None' name='[none:province:nk]' pivot='key' type='nominal' />
            <column caption='Province' datatype='string' name='[province]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]'>
            <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Onions&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;India&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</column>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <size column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk]' />
              <text column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]' />
              <color column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Average Price of Potatoes in different provinces of India and Bangladesh'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Average Price of Potatoes</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='f_commoditymarketprices+ (testglobalfoodprices)' name='federated.1io3ziw0gciwcs1di11yq03dnewt' />
          </datasources>
          <datasource-dependencies datasource='federated.1io3ziw0gciwcs1di11yq03dnewt'>
            <column-instance column='[market_price]' derivation='Avg' name='[avg:market_price:qk]' pivot='key' type='quantitative' />
            <column caption='Commodity Name' datatype='string' name='[commodity_name]' role='dimension' type='nominal' />
            <column caption='Country (D Market)' datatype='string' name='[country (d_market)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Congo&quot;' value='&quot;Congo (Kinshasa)&quot;' />
                <semantic-value key='&quot;State of Palestine&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column caption='Market Price' datatype='integer' name='[market_price]' role='measure' type='quantitative' />
            <column-instance column='[commodity_name]' derivation='None' name='[none:commodity_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[country (d_market)]' derivation='None' name='[none:country (d_market):nk]' pivot='key' type='nominal' />
            <column-instance column='[province]' derivation='None' name='[none:province:nk]' pivot='key' type='nominal' />
            <column caption='Province' datatype='string' name='[province]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]'>
            <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Potatoes&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;India&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</column>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <size column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk]' />
              <text column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]' />
              <text column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]' />
              <color column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Average Price of Rice in different provinces of India and Bangladesh'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Average Price of Rice</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='f_commoditymarketprices+ (testglobalfoodprices)' name='federated.1io3ziw0gciwcs1di11yq03dnewt' />
          </datasources>
          <datasource-dependencies datasource='federated.1io3ziw0gciwcs1di11yq03dnewt'>
            <column-instance column='[market_price]' derivation='Avg' name='[avg:market_price:qk]' pivot='key' type='quantitative' />
            <column caption='Commodity Name' datatype='string' name='[commodity_name]' role='dimension' type='nominal' />
            <column caption='Country (D Market)' datatype='string' name='[country (d_market)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Congo&quot;' value='&quot;Congo (Kinshasa)&quot;' />
                <semantic-value key='&quot;State of Palestine&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column caption='Market Price' datatype='integer' name='[market_price]' role='measure' type='quantitative' />
            <column-instance column='[commodity_name]' derivation='None' name='[none:commodity_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[country (d_market)]' derivation='None' name='[none:country (d_market):nk]' pivot='key' type='nominal' />
            <column-instance column='[province]' derivation='None' name='[none:province:nk]' pivot='key' type='nominal' />
            <column caption='Province' datatype='string' name='[province]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Rice&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Rice (basmati, broken)&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Rice (coarse)&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Rice (ordinary, second quality)&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Rice (ordinary, unmilled)&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Rice (white)&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;Nepal&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</column>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <size column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk]' />
              <text column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]' />
              <text column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]' />
              <color column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Average Price of Wheat in different provinces of India and Bangladesh'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Average Price of Wheat</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='f_commoditymarketprices+ (testglobalfoodprices)' name='federated.1io3ziw0gciwcs1di11yq03dnewt' />
          </datasources>
          <datasource-dependencies datasource='federated.1io3ziw0gciwcs1di11yq03dnewt'>
            <column-instance column='[market_price]' derivation='Avg' name='[avg:market_price:qk]' pivot='key' type='quantitative' />
            <column caption='Commodity Name' datatype='string' name='[commodity_name]' role='dimension' type='nominal' />
            <column caption='Country (D Market)' datatype='string' name='[country (d_market)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Congo&quot;' value='&quot;Congo (Kinshasa)&quot;' />
                <semantic-value key='&quot;State of Palestine&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column caption='Market Price' datatype='integer' name='[market_price]' role='measure' type='quantitative' />
            <column-instance column='[commodity_name]' derivation='None' name='[none:commodity_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[country (d_market)]' derivation='None' name='[none:country (d_market):nk]' pivot='key' type='nominal' />
            <column-instance column='[province]' derivation='None' name='[none:province:nk]' pivot='key' type='nominal' />
            <column caption='Province' datatype='string' name='[province]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]'>
            <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Wheat&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;India&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</column>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <size column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk]' />
              <text column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]' />
              <text column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]' />
              <color column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Average Prices of Lentils in different provinces of India and Bangladesh'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Average Price of Lentils</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='f_commoditymarketprices+ (testglobalfoodprices)' name='federated.1io3ziw0gciwcs1di11yq03dnewt' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1io3ziw0gciwcs1di11yq03dnewt'>
            <column-instance column='[market_price]' derivation='Avg' name='[avg:market_price:qk]' pivot='key' type='quantitative' />
            <column caption='Commodity Name' datatype='string' name='[commodity_name]' role='dimension' type='nominal' />
            <column caption='Country (D Market)' datatype='string' name='[country (d_market)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Congo&quot;' value='&quot;Congo (Kinshasa)&quot;' />
                <semantic-value key='&quot;State of Palestine&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column caption='Market Price' datatype='integer' name='[market_price]' role='measure' type='quantitative' />
            <column-instance column='[commodity_name]' derivation='None' name='[none:commodity_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[country (d_market)]' derivation='None' name='[none:country (d_market):nk]' pivot='key' type='nominal' />
            <column-instance column='[province]' derivation='None' name='[none:province:nk]' pivot='key' type='nominal' />
            <column caption='Province' datatype='string' name='[province]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Lentils (masur)&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Lentils (moong)&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Lentils (urad)&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;India&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]</column>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <size column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk]' />
              <text column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]' />
              <color column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Compare the prices of different lentils'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;Sheet Name&gt; - Masur seems to be cheapest and Urad the most expensive </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='f_commoditymarketprices+ (testglobalfoodprices)' name='federated.1io3ziw0gciwcs1di11yq03dnewt' />
          </datasources>
          <datasource-dependencies datasource='federated.1io3ziw0gciwcs1di11yq03dnewt'>
            <column caption='CalculatedDate' datatype='date' name='[Calculation_592504875785900033]' role='dimension' type='quantitative'>
              <calculation class='tableau' formula='MAKEDATE([year],[month],1)' />
            </column>
            <column-instance column='[market_price]' derivation='Avg' name='[avg:market_price:qk]' pivot='key' type='quantitative' />
            <column caption='Commodity Name' datatype='string' name='[commodity_name]' role='dimension' type='nominal' />
            <column caption='Country (D Market)' datatype='string' name='[country (d_market)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Congo&quot;' value='&quot;Congo (Kinshasa)&quot;' />
                <semantic-value key='&quot;State of Palestine&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column caption='Market Price' datatype='integer' name='[market_price]' role='measure' type='quantitative' />
            <column caption='Month' datatype='integer' name='[month]' role='dimension' type='quantitative' />
            <column-instance column='[commodity_name]' derivation='None' name='[none:commodity_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[country (d_market)]' derivation='None' name='[none:country (d_market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_592504875785900033]' derivation='Quarter-Trunc' name='[tqr:Calculation_592504875785900033:qk]' pivot='key' type='quantitative' />
            <column caption='Year' datatype='integer' name='[year]' role='dimension' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Lentils (masur)&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Lentils (moong)&quot;' />
              <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Lentils (urad)&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]'>
            <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;India&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</column>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk]</rows>
        <cols>[federated.1io3ziw0gciwcs1di11yq03dnewt].[tqr:Calculation_592504875785900033:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Food Prices in 3rd world countries'>
      <table>
        <view>
          <datasources>
            <datasource caption='f_commoditymarketprices+ (testglobalfoodprices)' name='federated.1io3ziw0gciwcs1di11yq03dnewt' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1io3ziw0gciwcs1di11yq03dnewt'>
            <column caption='Country (D Market)' datatype='string' name='[country (d_market)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Congo&quot;' value='&quot;Congo (Kinshasa)&quot;' />
                <semantic-value key='&quot;State of Palestine&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column-instance column='[country (d_market)]' derivation='None' name='[none:country (d_market):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <lod column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]' />
              <geometry column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#aa0000' />
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#f1ce63' />
                <format attr='has-halo' value='true' />
                <format attr='halo-color' value='#f17b79' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1io3ziw0gciwcs1di11yq03dnewt].[Latitude (generated)]</rows>
        <cols>[federated.1io3ziw0gciwcs1di11yq03dnewt].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Let&apos;s look at Indian food prices market'>
      <table>
        <view>
          <datasources>
            <datasource caption='f_commoditymarketprices+ (testglobalfoodprices)' name='federated.1io3ziw0gciwcs1di11yq03dnewt' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1io3ziw0gciwcs1di11yq03dnewt'>
            <column-instance column='[market_price]' derivation='Avg' name='[avg:market_price:qk]' pivot='key' type='quantitative' />
            <column caption='Commodity Name' datatype='string' name='[commodity_name]' role='dimension' type='nominal' />
            <column caption='Country (D Market)' datatype='string' name='[country (d_market)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Congo&quot;' value='&quot;Congo (Kinshasa)&quot;' />
                <semantic-value key='&quot;State of Palestine&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column caption='Currency Name' datatype='string' name='[currency_name]' role='dimension' type='nominal' />
            <column caption='Market Price' datatype='integer' name='[market_price]' role='measure' type='quantitative' />
            <column-instance column='[commodity_name]' derivation='None' name='[none:commodity_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[country (d_market)]' derivation='None' name='[none:country (d_market):nk]' pivot='key' type='nominal' />
            <column-instance column='[currency_name]' derivation='None' name='[none:currency_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[unit_name]' derivation='None' name='[none:unit_name:nk]' pivot='key' type='nominal' />
            <column caption='Unit Name' datatype='string' name='[unit_name]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]'>
            <groupfilter function='level-members' level='[none:commodity_name:nk]' />
          </filter>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]'>
            <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;India&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</column>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk]' field-type='quantitative' max='215.11360500000001' min='0.0' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>(([federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk] / ([federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk] / ([federated.1io3ziw0gciwcs1di11yq03dnewt].[none:unit_name:nk] / [federated.1io3ziw0gciwcs1di11yq03dnewt].[none:currency_name:nk]))) * [federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk])</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='Lets see the price trend of lentils in different provinces of India'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;Sheet Name&gt;. Lentils are a major source of protein in India where more than 30% people are vegeterians.  We see that its more or less the same in all the provinces (however, in Arunachal Pradesh its slightly higher but in Uttarakhand its slightly lower than average)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='f_commoditymarketprices+ (testglobalfoodprices)' name='federated.1io3ziw0gciwcs1di11yq03dnewt' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1io3ziw0gciwcs1di11yq03dnewt'>
            <column caption='CalculatedDate' datatype='date' name='[Calculation_592504875785900033]' role='dimension' type='quantitative'>
              <calculation class='tableau' formula='MAKEDATE([year],[month],1)' />
            </column>
            <column-instance column='[market_price]' derivation='Avg' name='[avg:market_price:qk]' pivot='key' type='quantitative' />
            <column caption='Commodity Name' datatype='string' name='[commodity_name]' role='dimension' type='nominal' />
            <column caption='Country (D Market)' datatype='string' name='[country (d_market)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Congo&quot;' value='&quot;Congo (Kinshasa)&quot;' />
                <semantic-value key='&quot;State of Palestine&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column caption='Market Price' datatype='integer' name='[market_price]' role='measure' type='quantitative' />
            <column caption='Month' datatype='integer' name='[month]' role='dimension' type='quantitative' />
            <column-instance column='[commodity_name]' derivation='None' name='[none:commodity_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[country (d_market)]' derivation='None' name='[none:country (d_market):nk]' pivot='key' type='nominal' />
            <column-instance column='[province]' derivation='None' name='[none:province:nk]' pivot='key' type='nominal' />
            <column caption='Province' datatype='string' name='[province]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[Calculation_592504875785900033]' derivation='Quarter-Trunc' name='[tqr:Calculation_592504875785900033:qk]' pivot='key' type='quantitative' />
            <column caption='Year' datatype='integer' name='[year]' role='dimension' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]'>
            <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Lentils&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]'>
            <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;India&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</column>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]' />
              <lod column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk]</rows>
        <cols>[federated.1io3ziw0gciwcs1di11yq03dnewt].[tqr:Calculation_592504875785900033:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Overall trend of market prices of different food items in India'>
      <table>
        <view>
          <datasources>
            <datasource caption='f_commoditymarketprices+ (testglobalfoodprices)' name='federated.1io3ziw0gciwcs1di11yq03dnewt' />
          </datasources>
          <datasource-dependencies datasource='federated.1io3ziw0gciwcs1di11yq03dnewt'>
            <column caption='CalculatedDate' datatype='date' name='[Calculation_592504875785900033]' role='dimension' type='quantitative'>
              <calculation class='tableau' formula='MAKEDATE([year],[month],1)' />
            </column>
            <column-instance column='[market_price]' derivation='Avg' name='[avg:market_price:qk]' pivot='key' type='quantitative' />
            <column caption='Commodity Name' datatype='string' name='[commodity_name]' role='dimension' type='nominal' />
            <column caption='Country (D Market)' datatype='string' name='[country (d_market)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Congo&quot;' value='&quot;Congo (Kinshasa)&quot;' />
                <semantic-value key='&quot;State of Palestine&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column caption='Market Price' datatype='integer' name='[market_price]' role='measure' type='quantitative' />
            <column caption='Month' datatype='integer' name='[month]' role='dimension' type='quantitative' />
            <column-instance column='[commodity_name]' derivation='None' name='[none:commodity_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[country (d_market)]' derivation='None' name='[none:country (d_market):nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_592504875785900033]' derivation='Quarter-Trunc' name='[tqr:Calculation_592504875785900033:qk]' pivot='key' type='quantitative' />
            <column caption='Year' datatype='integer' name='[year]' role='dimension' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]'>
            <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;India&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk]' scope='rows' value='Monthly Avg. Market Price(INR/unit)' />
            <format attr='subtitle' class='0' field='[federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk]' scope='rows' value='true' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]' />
              <lod column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk]</rows>
        <cols>[federated.1io3ziw0gciwcs1di11yq03dnewt].[tqr:Calculation_592504875785900033:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Price per unit of food items in each country'>
      <table>
        <view>
          <datasources>
            <datasource caption='f_commoditymarketprices+ (testglobalfoodprices)' name='federated.1io3ziw0gciwcs1di11yq03dnewt' />
          </datasources>
          <datasource-dependencies datasource='federated.1io3ziw0gciwcs1di11yq03dnewt'>
            <column-instance column='[market_price]' derivation='Avg' name='[avg:market_price:qk]' pivot='key' type='quantitative' />
            <column caption='Commodity Name' datatype='string' name='[commodity_name]' role='dimension' type='nominal' />
            <column caption='Country (D Market)' datatype='string' name='[country (d_market)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Congo&quot;' value='&quot;Congo (Kinshasa)&quot;' />
                <semantic-value key='&quot;State of Palestine&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column caption='Currency Name' datatype='string' name='[currency_name]' role='dimension' type='nominal' />
            <column caption='Market Price' datatype='integer' name='[market_price]' role='measure' type='quantitative' />
            <column-instance column='[commodity_name]' derivation='None' name='[none:commodity_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[country (d_market)]' derivation='None' name='[none:country (d_market):nk]' pivot='key' type='nominal' />
            <column-instance column='[currency_name]' derivation='None' name='[none:currency_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[unit_name]' derivation='None' name='[none:unit_name:nk]' pivot='key' type='nominal' />
            <column caption='Unit Name' datatype='string' name='[unit_name]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='width' field='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]' value='160' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>(([federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk] / ([federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk] / ([federated.1io3ziw0gciwcs1di11yq03dnewt].[none:unit_name:nk] / [federated.1io3ziw0gciwcs1di11yq03dnewt].[none:currency_name:nk]))) * [federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk])</rows>
        <cols />
        <mark-labels>
          <mark-label id='0' label-state='on'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields />
                  <y-fields>
                    <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]</field>
                    <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</field>
                    <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:unit_name:nk]</field>
                    <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:currency_name:nk]</field>
                    <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk]</field>
                  <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]</field>
                  <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</field>
                  <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:currency_name:nk]</field>
                  <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:unit_name:nk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>318.39999999999998</value>
                <value>&quot;Apples&quot;</value>
                <value>&quot;Algeria&quot;</value>
                <value>&quot;DZD&quot;</value>
                <value>&quot;KG&quot;</value>
              </tuple>
            </tuple-reference>
          </mark-label>
        </mark-labels>
      </table>
    </worksheet>
    <worksheet name='What about prices of milk in different states in India?'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;Sheet Name&gt; We see that the price of Milk is more than double in Arunachal Pradesh as compared to Himachal Pradesh</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='f_commoditymarketprices+ (testglobalfoodprices)' name='federated.1io3ziw0gciwcs1di11yq03dnewt' />
          </datasources>
          <datasource-dependencies datasource='federated.1io3ziw0gciwcs1di11yq03dnewt'>
            <column caption='CalculatedDate' datatype='date' name='[Calculation_592504875785900033]' role='dimension' type='quantitative'>
              <calculation class='tableau' formula='MAKEDATE([year],[month],1)' />
            </column>
            <column-instance column='[market_price]' derivation='Avg' name='[avg:market_price:qk]' pivot='key' type='quantitative' />
            <column caption='Commodity Name' datatype='string' name='[commodity_name]' role='dimension' type='nominal' />
            <column caption='Country (D Market)' datatype='string' name='[country (d_market)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Congo&quot;' value='&quot;Congo (Kinshasa)&quot;' />
                <semantic-value key='&quot;State of Palestine&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column caption='Market Price' datatype='integer' name='[market_price]' role='measure' type='quantitative' />
            <column caption='Month' datatype='integer' name='[month]' role='dimension' type='quantitative' />
            <column-instance column='[commodity_name]' derivation='None' name='[none:commodity_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[country (d_market)]' derivation='None' name='[none:country (d_market):nk]' pivot='key' type='nominal' />
            <column-instance column='[province]' derivation='None' name='[none:province:nk]' pivot='key' type='nominal' />
            <column caption='Province' datatype='string' name='[province]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[Calculation_592504875785900033]' derivation='Year-Trunc' name='[tyr:Calculation_592504875785900033:qk]' pivot='key' type='quantitative' />
            <column caption='Year' datatype='integer' name='[year]' role='dimension' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]'>
            <groupfilter function='member' level='[none:commodity_name:nk]' member='&quot;Milk (pasteurized)&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]'>
            <groupfilter function='member' level='[none:country (d_market):nk]' member='&quot;India&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</column>
            <column>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1io3ziw0gciwcs1di11yq03dnewt].[avg:market_price:qk]</rows>
        <cols>[federated.1io3ziw0gciwcs1di11yq03dnewt].[tyr:Calculation_592504875785900033:qk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Procurement of food items for Rohingyas refugees in Bangladesh and Myanmar'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Procurement of food items for Rohingyas refugees in Bangladesh and Myanmar</run>
          </formatted-text>
        </title>
      </layout-options>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='13' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='5750' id='12' type='title' w='100000' x='0' y='0' />
            <zone h='94250' id='6' param='horz' type='layout-flow' w='100000' x='0' y='5750'>
              <zone h='94250' id='4' type='layout-basic' w='84000' x='0' y='5750'>
                <zone h='47125' id='1' name='Average Market Prices of grains and potatoes in SE Asian countries' w='42000' x='0' y='5750' />
                <zone h='47125' id='3' name='Average Prices of Lentils in different provinces of India and Bangladesh' w='21000' x='42000' y='5750' />
                <zone h='47125' id='8' name='Average Price of Rice in different provinces of India and Bangladesh' w='21000' x='63000' y='5750' />
                <zone h='47125' id='9' name='Average Price of Onions in different provinces of India and Bangladesh' w='28400' x='34600' y='52875' />
                <zone h='47125' id='10' name='Average Price of Wheat in different provinces of India and Bangladesh' w='21000' x='63000' y='52875' />
                <zone h='47125' id='11' name='Average Price of Potatoes in different provinces of India and Bangladesh' w='34600' x='0' y='52875' />
              </zone>
              <zone fixed-size='160' h='94250' id='5' is-fixed='true' param='vert' type='layout-flow' w='16000' x='84000' y='5750'>
                <zone h='90750' id='7' name='Average Prices of Lentils in different provinces of India and Bangladesh' pane-specification-id='0' param='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]' type='color' w='16000' x='84000' y='5750' />
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='worksheet' name='Food Prices in 3rd world countries'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='Price per unit of food items in each country'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</field>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:currency_name:nk]</field>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:unit_name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Let&apos;s look at Indian food prices market'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]</field>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</field>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:currency_name:nk]</field>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:unit_name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Overall trend of market prices of different food items in India'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card size='31' type='pages' />
            <card size='47' type='filters' />
            <card size='175' type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='272'>
            <card pane-specification-id='0' param='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]</field>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</field>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[tyr:Calculation_592504875785900033:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Lets see the price trend of lentils in different provinces of India'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]</field>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]</field>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[tyr:Calculation_592504875785900033:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='What about prices of milk in different states in India?'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</field>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]</field>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[tyr:Calculation_592504875785900033:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Compare the prices of different lentils'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]</field>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</field>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[tyr:Calculation_592504875785900033:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Average Market Prices of grains and potatoes in SE Asian countries'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:commodity_name:nk]</field>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Average Prices of Lentils in different provinces of India and Bangladesh'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Average Price of Rice in different provinces of India and Bangladesh'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</field>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Average Price of Onions in different provinces of India and Bangladesh'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Average Price of Wheat in different provinces of India and Bangladesh'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</field>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Average Price of Potatoes in different provinces of India and Bangladesh'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:country (d_market):nk]</field>
            <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='dashboard' maximized='true' name='Procurement of food items for Rohingyas refugees in Bangladesh and Myanmar'>
      <viewpoints>
        <viewpoint name='Average Market Prices of grains and potatoes in SE Asian countries' />
        <viewpoint name='Average Price of Onions in different provinces of India and Bangladesh' />
        <viewpoint name='Average Price of Potatoes in different provinces of India and Bangladesh' />
        <viewpoint name='Average Price of Rice in different provinces of India and Bangladesh' />
        <viewpoint name='Average Price of Wheat in different provinces of India and Bangladesh' />
        <viewpoint name='Average Prices of Lentils in different provinces of India and Bangladesh'>
          <highlight>
            <color-one-way>
              <field>[federated.1io3ziw0gciwcs1di11yq03dnewt].[none:province:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='1' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Average Market Prices of grains and potatoes in SE Asian countries' width='192'>
      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
      IAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Average Price of Onions in different provinces of India and Bangladesh' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Average Price of Potatoes in different provinces of India and Bangladesh' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Average Price of Rice in different provinces of India and Bangladesh' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Average Price of Wheat in different provinces of India and Bangladesh' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Average Prices of Lentils in different provinces of India and Bangladesh' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Compare the prices of different lentils' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Food Prices in 3rd world countries' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Let&apos;s look at Indian food prices market' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Lets see the price trend of lentils in different provinces of India' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO29WawlSXrf94slt7Pdfa2tq3rvnp594QyHG0hTskVKoigIhCHTWmjDtgAB
      ftYLYcBPNmRgAMt6oASbgGiZJESKNmc4Ij3j0aw9vXdXV1fXfqtu3X05e64R4Yc8dauqe2a6
      quferuo++QPOzcyTN/MEMvMf8cUX3xcpnHOOiooxRT7oAlRUPEgqAVSMNZUAKsaah0IAxhiM
      MQ+6GBVjyEMhgIqKB0UlgIqxphJAxVhTCaBirKkEUDHWVAKoGGsqAVSMNZUAKsaaSgAVY00l
      gIqxphJAxVhTCaBirDlcATjL/uYK19b3D74ycYcLl66RWejv3eSll15lt58e6s9WVLxfDlUA
      eX+Xtc4e66u3BGC5cuFt3n7rTeK0x+tvXGV6OuKNV86RVXloFQ8B+jBP5jXneLapefnlDgDD
      nRv0/AWOzQxhsI9aeJRHTi+S7X+fXgaT2uCcw1oLcLCsqPigOFQB3E3GKz98iWziGHsr1wln
      5jCmBTisFUgBQgiEEAA455Cy6pJUfLAcqgCy/h7nL53lypUhtUnNU5/7WdLc8HZ3g9b8cYZv
      vMT3vnuVwpvjcQ+kKB945xxCCJRSh1mcior3RBzmrBAmHbK9u49x4EctZqabSCAeDvCjOibp
      sdsZMjk9S+TffthvZYNVAqj4oDlUAbxfKgFUPCgqo7tirKkEUDHWVAKoGGsqAVSMNZUAKsaa
      SgAVY00lgIqxphJAxVhTCaBirKkEUDHWVAKoGGsqAVSMNZUAKsaaSgAVY82hJsTYbMjli2fZ
      c0t84WMn6O9c54cvv0mmJvmZL32G/sobvHppkzMf/zxPn5xFHOaPV1S8Dw61BXDWMrG0gM7K
      +H4rQz7387/Cx5Ya7O6scGXf45d/5cv0Vi4zrNJ/Kx4CDrUFUGGD+TBn9VqZFN+ammV//Rrb
      NuCJQLE3u0AUtphqGuIUAq/AWotzDuccRVEcZnEqKt6TI0yKh/2NFdYHio89fRov3SS53ibP
      W/SHkiUftCp/vsoIq3hQHKoA4r1Vvv3882xs5wxtRjO/xMX1nEtvneNjX/wSS+oSX/3aBU48
      9Rka1bNe8RBQ5QRXjDWVG7RirKkEUDHWVAKoGGsqAVSMNZUAKsaaSgAVY00lgIqxphJAxVhT
      CaBirKkEUDHWVAKoGGsqAVSMNZUAKsaaSgAVY00lgIqx5r4EYE1BXhiMKd/v+06cNaxdOcvr
      lzYAMEmH73/jP/D8G1cpnGPv5tt8/S/+ihu7fR54EkJFBfclgIw/+9//R/6nr3yVr//pH7HS
      jt/1H8WwTRL4ZN0EgMtvvcHCMz9DI7nJ2vpN3rjU4Utf/iRX33iTtEqKr3gIuI+UyA6xW2Qx
      1NhhSvIj3uruNWY405C0N8ukeCd8Zqdb2GSBtfY6teVTNBuzLE5eoJ+CrpLiKx4w9yGAWZ59
      ep6vf+NlirnP8ysTtfc8wtqCvLAUeUEQhOwNYpwz5KnE80DrKim+4sFyHybQNq+fVfzTf/bP
      eE62udoevOs/4r1V/sPX/pIXX/w233nxAjNzE3zna3/K9y5tMHvsCVqd8/y7f/en7PjztI50
      PoqKinvjPpLiU/7gK/8csfwkN65t8Nv/7e+wWPcPpRBVC1DxoLivWSGsSbh5fZPJ5WUavkaI
      w5ncsBJAxYPiHg2RHf7qz19l4/LrrA4zYIrf+if/JY80wyMtXEXFUXOPLYDDmj5vn93hzDPH
      kQiUVsiqBaj4kHOPnWCBVAE3L3yXK5s98ryoBrIqPhLchxcoIe7FfPP//r/4/d//EzaG2dGV
      qqLiA+Ke+gDDjXP8r7/3x8RW8Ut/73f48lML1dz+FR8J7kkAb333VX7xH/5TPjG5zR/827N8
      4akFDscBWlHxYLknAViG/MW/+T2+62dcemuPvd4N/u7v/BYnG5UXqOLDzT15gYosIU7zO76R
      RPUaWlZeoIoPN9X06BVjzX14gXb4xldfIgfOf/c/stIZHlmhKio+KO5xJLjNH//Lf8VfPr/O
      Kxe+TVrU+Yef+MLRlqyi4gPgHk0gy7C/yWsvb/H0p87ga58o9KtYoIoPPfdoAklqjTkG69/g
      //g/f8D3vvkXrPXSoy1ZRcUHwH30AfbZ7IQ0jcV0enSzKnur4sPPvQvATfPEo5Os3XyeS3mL
      Y63oPQ8p4i5vvPwCZy+tUlhHf/cmL774Cjv9qvWoeDi4jxagz36yxH/13/19pvM+7bvGBX40
      l996DT21jN1Z5frWTV47e5XZ2TpnX3mT7IE7Xysq7nUkuMjJi4AzS0O+8pU/5G/9g7/PUj14
      z+NaExNcWVvBOMWSidleeJRTjyyS7n2fXgaTupxexY4S7O2PSLSvqDhK7kkAN899n69+5yyG
      gtak5oVvfIvl43+X442fLILBMGH+2Emy3XV6SYoxIWVugUAKEELc5UmSspqnq+KD5T5GghNu
      rvRYOjV3z3bThVe+zVbsY4Y9lp99js7FsyRSY/x5vvy5p1GjZ79yg1Y8KO5DAF3++H/5l2zN
      PMLxyRm++J/8HHPRT44JNXnC3l4bvIjpyRYmHbDXHTIxNUPk337YKwFUPCjuY3KSiMc//RzJ
      9R06nR7FPehGeSFzC4u3t6MGi1Hj/ZTzPbHGsvLSJZLOgOlT80wuTxM03ttTVTHe3IcA+rz6
      +mtsdhZYOtHF2YcvJcakOSsvXeLifzxLNNlg+uQci08eozE/ycTi1IMuXsVDyH1NTxU1jzFl
      +gz2oZdm0Hh40mKkkpz54lMsPXOS3ZVNdq9u0l7fY+3sCtrXNOYmWHhimbnHlmnMTeAF3oMu
      csVDwH30ARzt/X2Geze51tF85uNPEujD8docRR/AOUc+TOltd9g4v8ru1U36O10AwlbE5PIM
      Sx87xeTyNNFE/dB+t+LDxT0J4K1v/jF/9uJ1ouBWgzHJb/yjv8eJQ8oIO+pOsHOOIs1JukP2
      buyweX6V/RvbpIOEaKLO5LEZZk8vMnVilub8BMqr5m0cF+5JADtXXuPPv/F91MQySzMtlk4+
      xqOnlwnUw9sC/CSsscTtAf3dLuvnrtNe3aW33UFpRWO2xdzjy8w8Mk9rYYqgER5a1GvF4WIK
      gy0MJjeYrKDI8nK9MOTDFFMY0n5cLnsxQkomlqaZPb1Abap0xtyHCWTZXb3Ed777AivrQ/72
      P/4vOHlIM8M9SDeoc448zuhvd9hbLVuH7mabfJhSm24wfWKOhaeO05yb4NZUGCY3d5/DurtG
      se079udpDvb2ZbbWYu4IJhRSELZq6MDDCz2Up/FCHy/0EYeUdvqwU2QFRZqRJzkmKzCFoUhz
      iiQnT7LyE2dkw4Q8yUl6MSYvsMaWIigMNh8JwpT3QkqBDjyElOjAO6j4ooka848vs/TMyXsT
      wObbP+Tf/+UPsPVZHn3kGAuLJ3niiVOEH9IW4CdhrWWw22Pv+jZbF27S2+rQ3+ng3THmYYu7
      QzacczhzhwDM3fulknBHKyKEKL+743iTFwc3SnkK7Xt4kY8f+YStGn49JGrViCbreIGHvkso
      5U1+GLHWYnNz8AAXWfnwpoOEtJeQdIfEnQHpICkf+KzA5gWmsDhrEVKitEJ5CqkVytcordCB
      N6owfLzIw49C/HqADj083yNoRggpUJ5GSoHyNdY4+tsdbrx6hfbNXQZ7vXsTwIXv/Hv+7IfX
      qIW3PCcT/M3f/k2Of0j6AD8NaT+mu9lmuN8/qPl16N01L5Ic3aBb6MC/83lHKsWdB/woAeRJ
      RjbMSLoDkl5SLrsxRZaXtWJelA9Imo+EolGevi2UWkDYjAjqIeEtoYQ+cuSoULosn5DyoFWR
      6ta6OPi/O//3vfpC1lpMWpAnGUVa1tTpICUdxMT7A5LekOFenyIvDmpyM3q4vdBD+95Bq+fX
      Q6KJGkEjIpqoIbUibNZQniqn4dQKqWX5QGuJ9rz33To650j7CZtvr1ZJ8Q8zzrmy9szyAxu3
      NANSkm5ZiybdIXF7QD4SxzuFIrVEUIoU7hbArfU793PHurpDFF7oH4jYC/zSnOgOKEYCMFm5
      FKKsbb3QRwceQT3Eq/mEjYhook7QLJde5KN9fVCTK/0AzF9bvD8BJP0eIqwRHFKhKwH8dDjn
      sIUhT0dCGdXG2SClSPOyhRmFr9tRJxHAjjqRAHkymurSQZ5m5TK5Pf2lucPss4VBSIFfC/BC
      n2iyTm2qQdiICFu1OwSg8YKHox/jnAObYLM9bLqBGV7D9C/c30DYLW6eO4f35Mc5OVGFGjwM
      CFHaukfpvjX57U67KUxphh3iOyIOm7Jf1sdlbczwKmZwBRPfwOV7ODNEeJNIf/b+BsKKg1mh
      H87p0dNhH6k0XlDNWDduOJvj8jY228YMr2P6F7HZLjbfB2eQ/hTSn0fVTqHqjyGDeYQ3cT8t
      QMyf/N7/xnrh0+t0aB1/lt/+rV9nInw4Bo1MkfPC1/6I7s4mz/38f8rimScrIXxEOTBn8g42
      3cIMr2AGV7HJOq7oImSA8CZRtUfw67+Eik4i/Bmk13rXue7j6R2QiDP81//kb/PCn/4xl7f2
      WO0OmQjffdLbJTXsbW3SKyTLC/PYtMvmbp/phUUaweEKRyrNqWc/w4tf+yO++W/+BQunn+CZ
      n/0Vlh59Gu09PDFLFfePcxZnBri8XZoyw2uYeBWX7eBMjNAtZDCLnvg4uvlMadr400j93pHH
      92EC5Xzjj36f8zsZwyLimUdmee7nf5kTP6EfsLPyJmevd5mameHx00u8+cKLuDBgaCf48hee
      RR9iQoyzDrfdJt7f5/LKG7z96ncZdtsce+JZPv6Lv8bsidPvyjhz1uCcwZoc58p1UyQ4a7E2
      G134jKJIwFm030TpAKWjcunVkfLhaAE/Sjib4Yo+Nt3EJhsU/fPlerYPrkB4E0h/FlV/FFU7
      jQqXEd4k4n3ci/sygZK0xqnHHuNjn/gEJ2YnkO/Ru9/c2mJu8QyTrTpeuk8x8zg/8+wy5198
      nl4OE7r0LNx6UfZPhXOkO5tkq1c4FvhM/NznefvtH7B1/f/l23/0XR7/7OcJ6yHGpBRplzzr
      YfIhzhajh95gXUGR9e/4rsCYFGctCJDSQ3t1tN9A+3X8YBLl14kaSwS1OYJoGj+aIYhmENJD
      6QipPKSOUDqE6q0KPwIHNgfTw2WbFIMrmMEVbLqFy/dABKBbyNppvKmfR0XHkcEcQrfuPAPO
      Acb82F/5cdyHAFr84t/4JZ7/zrf4/X/xMv/5f//f8Oh7eIFskdPv7NNdvUR7YRYh54AyH9i5
      2w/+nZ/3iykSzt/8V2ysfAvrSvedQDG1oEFI1i6vkSUpFonyQsL6JMqLUMpHqggdNvF1QD2c
      BumXtb3y0X4L7dVACLJkH5vuk8Q7ZMNdkniDortBe+sc2AxjUmyRYl2BUiHabyF1iBe08IIp
      vKBF2FjEDycJ64uE9XlU7hDbOzA5hZicQcjbraCQCiHubLXEXbWclOquEWYQSOn9hOMfPLfN
      mQ42WaPovY1L1yHfBpsgVB0ZzKAbT6Bbz4I3j/CmQdXecZ7DGb66r4SYb/3517ieCD7/Sz/H
      fPTe8fSz84sUcUQoYmx9CnftMhfUHhtJjTM+KFHe7MMwgaz1eGX3aV7euJ34IoVGSh8pFKiA
      Yb+PdQodtmjNLN/1sN3CWEdh3jk7xa2apUngTQKnAQg8hTUprhjizIAiG4AdIO0AUyR4IkWI
      8ly+yBBiH8kuWpYClVhCLVBW4qkcFUQorfBG+wPNQSsrsaW7U/sILAKHVB7qrv0gdYDEIXAI
      VbZYXjCB3ziG9ifxoznC5hKIACE1hXGAozCOvDBko3GBQVyWYZDko2VGllvy0X6tJY8sTrIw
      VacR+dRDH9979/V0NscVA2y2g01uUvTOYZNNbL4HNkd4LVSwgJr8BVTtUWQwjwxmEeKDGRO6
      DwH4fO5Xf51PF0NWr24QG0vzPY5YPP0U2eWLDIJjPH78BMWEz+Ube3ziU0/gHbI14Kyl3/cx
      xUz5hQCrNEgPISzK5kStk0jlQBra7RVskqGwNL0cLwhRDupKILUApVEOtHOgPAzQUzAYpmQ2
      x0hJYn2MUDgrMEYAIc5GwCwIcFbgAIFAotHCQwmNzcvayzkwoyA6Y0etIBwEc5X7ygulKBCi
      PE6JYiSCcv3gu1v7MQfCu0XhtrBuF+uughA41USqgCw3OCDLzYGwAKQwo+UosAyDwqEFqHAS
      Zy29OEd6PrMTNeYma5yYm+D00iSPHZ8mYgc/u4CfXcSmm7hsB6EihNdChsv4s7+ADBeR4RLS
      mzzUZ+F+uLd3hO2v8+IPvs/ZiytcOXeFp/76b/LYPQTCCelz6vFnD7b9yUWem1z8CUe8f7R1
      /J3tFZLNy2CK8unyA4hqCB90o0FjdpL63BxWKTY7krXuHsM0p6UTHv3kJ1BhiAzqCN9H1xoI
      z0d6PsKvgTO4/jbZYJN+ske8f5XB3hv0Tcx+fY5hENEPA4YSjDAYacmtxQiLFBLpAiJVI5Q1
      Qtmk4bUI0xo69vGch9IBgV9DCEmBQwhBEQ9hdwe2t0kSMEkKzpE4gRE+dmaWuNaEKCJx4qDl
      SnNzVysmBNQCj8BTaHLIh9REStFdxW58j8RmCJXihAFhcVIilcNiUS4ur6/I8TCEUuBPnCRo
      LJMX87Q3d7kZe6y35/n+WsQ3XtSkxmciSJiKEubqjkdn6px55LMszj5Jc3KZWmPy0MaQ3g/O
      OYxxZIW5Ny/Qa3/+r/nDV3r8Z3/jV+m/+gLLv/YbPDf3XvX/vXMoXiBjSF7+KvbyDxFpAoW5
      2050YDOLUApZb6KiGjKaIhUesSlvhnV3m3XGakAgRvE01kkc6iAa1Nq76w+HJAdynZOrjFga
      Yi8h8RISnTD0hyQ6xYk7jwFdBGAC/KJOw7RoiRaTZprIqxF4IZHy8UxGur9Pf32dBTugJgwK
      g9QaZmZgcop8apq3E0XXCnpGcGcb4PIYu3sF11vH9jdx/S1c1r+r/BaBacxip05hokkKm5On
      HfK0R9xfw6fHfLTLXLSPNZbCWIJomrqXMzszQyaneXnjBK9cn2al2yJxd88bFfqaxekGJ+Zb
      LM82mfqAX7TuHOz3Ena7Q9r9hEGc36Mb1Fq2Vi/y+tm3eP3FVzCzT/Pb/+DvsFA7HP/6ofQB
      TE7v7J/B3itokRMKyTu9LsKBwUfIGqbIEc6Ac8jCQGEOTIgD3uHlEqL846TEKXlgLtz1P3d8
      J7i7j+pcaWTYkVlhgUJALqAjYVvDuoZNDZkAZwK8IqCe1alldWppjVYygSo0dWupF5bIJtTs
      gMAlaGcorGWrENzIFBcSyUYuGVjBwAqGVmBdKToLGAfFaLvsQMjbSylxNkOTcHxiwGPTHR6b
      6TBXj1lqxWSFYm0v49JaQk1sIIoO1kmu9k9zbfgYa8lJLDWkNXDnddIhwisf/Cw3pPm9e248
      LdGq/NwLzoHFYKzBYhDSIqRDSof2DX74PoPh4k4b6k2ihygYzjnHsLfFxs45duIr7HYu0bBd
      ZvWQphTUlMATktS0UNFx8rxGNghJuxl6aGgkNfzMYNr7FLubFIMeeTFE2TsmUJUCtMRpjfE9
      hK8wno8JA4zvYaMAG/pYz8MJUT5PnsILI6Jmk6AWEYU+UmmUUojhFqJ9DWFShPbK3yliMlvQ
      UbCrYFuVgthTkEnIhMArPII8PBBGM2nSTCNauaFeFDRtTq0YopxBjjrwAocAclt26XMHqRUk
      DgonQElcIHC+oWgYiqkYwy6R2GOqluKsQBQexE0KeQw99zF6dpIs19TVANc7T2f9FXb3XiNx
      PXrGxzDNhHHMZh4BNTzhIxrz6Ed/Gdk6RjfOWdvpcX2rw8rOgI3UkVhB5sryuTsqMCGgEfnU
      Ao/JRkg98mnWfFr1gKlGRMMDEebExAxNh8T2GdoumRuSupjCZkgvR2mL0hZrBNbKj044tMtj
      km/8DxRbbyDmHkPOP85OWOdS2uVGvIpJ9ohsxslAsOxLIikIlAAbUpiQPJtEmWUanMETdfJB
      xs2Vt1i7/ibFcJOW7qBzhc40qpDozEO60tUqrABrkYB0gBBYrbFaYX0f43lYT2MDHxf4UI/Q
      k5PIVp1georWyVM05xYQeYxI9hHJHqQ7iHgLUQyhSEiwtJWkHQRsK9gLa+zaPimODIexBZ7x
      iLIadRpMmhYz1KnngsJm2DylKGKczbGyQIgCKwxWWArpKHRBVhuS+xmZHLVQojSjLAJrNKQh
      RkAuHdKBcgLPCpQTKEu5bqFnNknsLsLkqCJHWcekm2bOLjFn5tFOEhQCz0okZcssEAyNYCeX
      dCzsWcGucGwLx6Zw7OPIEk2RKvJU4ZzAWYG15RInsdahtEUHBu1ZtG/Kbd+gfUPkGZJckcYe
      eaLIM/UREoApuPIXX6F468+Y1kM8UWBVhKj5MDlHtznPSt3yZq7YsQW+yWnmCYu+4Kmaoqkk
      gRQEUiLtJMJOI808Np1hdW2Xa+vnSYs+QoyadOFQ1qKlhywsssipKQikI1SSSIGWAqUkBKXJ
      RCBBlx+nymWhA5TLkcYirIcKakgZoPwaSoaoIkYkfUSeoojxJnyEE4CEoEVPe7Q9j37UYjeM
      2Mp22C26GCyZyXA4BAJcjnCl56isV93IRJNIGZTxM0IiEASqNFG01GihUUKjpYcS6mAphKC9
      ukOSD3EavKmAXOakJsE6i8PhnMWOPgAWW46q43CiNLe0EUgH2gm0LT+FdMTakiuHRKKkRgmF
      FApPevjUCGnhuSa+bRC4KUIm6PZzBklOf5jSHqS0ewm9OKXTTzHW4lzpVm6Emrmmx1TwPk2g
      w+YwBJDnBf/P915jc2CZ1EMm6QIObcoLrkyCpYGKFJ2WZk1JrMuJsx7DYYzKu0xrWPItpyKY
      UOU7DCQFyimEbWKRGCS5UBgEmVAYJAUhBk1OiMHD4GOdwqIp8LAoCnwsHuYd2zgDSKQo0KR4
      JHikaDJ8McAjHn2XEBQ9ApkSkBOanNBkqMJDW9A4hFTIaAJXm2YQ1Hh9sM7luI2yMVGxg7Qp
      kvJ/a1KglYeOTuBHJ6nVjhF6jXLMBKj5d08VU3/Hds2vk/USNl5aIe0lNJcnWfjkCaSSGGcx
      riC3GbnNyEw5ppDbjF7/Jlur32N/9zx25Kp2UhGgCIWmUArPFIR5Rj3L8KMZ6tNPUJ84STh5
      hvrEI/ftQcoKS5LmmDzBH65Rz7ZgsInrb3x0BFBYyzcv3eTK7hAQ1P2IyPMYDmOcsRQWrLMI
      IfGEwZMjX/yos1wuJQZN6dwpLX9R1p+3caVRcKsrKQ66lA7hRt+7jMCBNgXKZGiT4Wd7+Pke
      XraPcjle0UebGGVTrPDIdYNc10m9CTI9QeJPk3ktMt3ECYUTEis0VmgKoRFCYV0BriByCQ1R
      oFxBQErgYgKb4pHTsB2m7C6RG6JdgaL0Ho0jzjlyZ+iZgr084+yw//4SYh5GnHP0kn324w2c
      s3RiQTMIqGmNzBL0oI8eJHT39kh2rzDvDzmpN5kOcgJRgA5wziN2s2xHx1mfm6MzBUYHHFcJ
      i2TlIJXLMC5DugLrUpTNsCYlymPqcRs97OKlKSrLCNMCm2R4NsfgMAhyIRgIxb7SrCmfHe2D
      lExYw4wtmLMFU7bAM+LAg2KkT6Eicq/FUDfoei2sN4Nfe5Tcn2bgz2C9FonwaasGsfQQqhS0
      EwKDRFHQsh0iN6CV7dPMUxrOMBEPcM5iXEpWxGRxjyxPyYsUVxSkyQCAQpUVxih8C20FQVEu
      vZGePCfwdFi6nDEUJgUpEI7RWAgoFGUlMfpAWak4yP2M/nSfLLqdiYZwB25jd8tLJ8DhDpx8
      7p3eux+DcYb9PGEjG6JTR5R/hF6Ubazj+esdLu30yExKWgwpTEJhMwoblzEoWCLPo640ebeH
      GMa49i4nzAbB3lsc03vMyz08crA+qZ1mo7nIdn2ezmRI4cco3aWZDpnudwmzlFqW0IwH+HmG
      BXJR+l26UrOlPNrCY1MG9P2I3K/Rj+qI5gxBGFILI0Klyrh2JXBaAQXSwMJ+xMJ+RGgyrNwm
      V6s0ki6NZEgjjVHWIp1DWot0Fit8Ul3HeZMkuk6iW+x5TTrSZ1sHFN4kfriM8+fxg0WM9LFC
      g/SxZkgn3WCQ7zDMthhkG6R2E6FzGI1Ai1GLKZ0lMDnOCfTQ4Q8Fja5FpR6tNODk/OdZaJwh
      sxlXNr5Nu9hioFNs5IGCUIUoIYispmVDaiKgSUBdRky4EGXLKF1rR+MlEpyyYHKQFiUkTrly
      v7NYZXGy3DaiABxWW6y0GJPglMUJMC7FkJfBieJ2vf8REoDhL9/+Oq+vXSAzgkHmkOJWZy4g
      twkgyvxZVwACJctxDF+FNDwfPczxBjssxBs8Ytaody4xrQaEziKcxAqLRVAIQYKgKzW7SrMh
      fbakz0AotoRPbHzCrMlC1mAuaTKZh8xPLLI4eQwvCFC+h9Ia6euyptYOFxQQDLFyhzS/QjK4
      gHNNhuZZ9tM5Yt3DC64hVZfcJMjhPkGWEOQZUTrENwWNJMazhsAY1KiCvN3pvb1upM8gWCQO
      ZunWz9CLTjAIl+jWz2ClxgoPIz2syDCii6WHFQOkWUebXWrJKoUU9KIaiReUD6o1kBvUACbN
      HE92P06YBWzvnufm5ssULidTjl5U0A8N3dDQjQqMvPvxC1TArQpdIvFFOThZlyF1GTCtmjRl
      jRndpOXVmRUtNBKJPDBWBXI0/lIGoUil0H6IlBoT98HkZdjH+02KP2wOQwBxnvA//9U/59zW
      a7iDMdBbCZwlWgq0kgcjxNbdiskZeSlG3otbeMKjWQx5rEiInGEoNH3psacCeroGRYjuC7xY
      ozOFyhReohE5o74CKAQBCg+Jh0SPluV3Ch9JIMpOYIQmQBH4Aco3aH+IDA19PU13cRJqkqUZ
      y0IjIGydQE0cw5iUPO9SFEOMjTH5gDztYNMeDHbQQuEpn9Bv4vtNtNBgMlzawxlfxLwAABGe
      SURBVOUJFCk27uCScnvofAZyioGo06VJLzpBp3GGzGvhhMIqicAQ5B0AcqXJtX7XkKB0Es/4
      CKAwKda++62iDsi1e9ex74WS8q5pZbSTaPveg2PSWbTLqRV9omST6fbLHx0BUGTsv/aHPH/j
      OtdSj8upZCWV5E5QUAZ8zTciTkxNsNRq8rGlZXzl0EqVtiqQFDG5yRlmGb20YH/YZrPfJ87b
      4ASebqFkDS0b+HoCKTTCSSiKclg1y8EJRF5g0xQKi7DgsgyTxdgsw+UpNk+wyRCcLQPgrMXa
      0m2IKyM5NZIIXQoEhfI9xHwD5WuiTDC1kVOXPrUoot5qoUMfb6KBP1FH10KCqRYqCpC+xhWG
      vDfE5QYbp5gkw8QpNs3LmSGSDGcMpp9gjcEmebk9SBDCIqTB+B5JbYp0skVWr5cDf6NQaykG
      KDlEqz0E2SgQz41cxu/GOY0xdYqiRW7qFFgsjgJH4UrXpxDlOIMeuWbVQf1eRq9KmSNEgZJx
      uVRDhDAI8eNf3uiEZBAssld/gkw1cfIjNBAGQG8ddi9A0oakTdLf4UZsuBwLLsSa66ngWqpK
      UTjBTL3ByakpHp2d5czMLE/OLzIRhmVLIWUZSy8ESV4wyFKSIifOM3ppwiDLGGQp/TQlLQr6
      WcIgTbHOYZ0r+3iU62WTrFDCQ0lNoDWNICQQjoaSmDSjNxjS7fbo9QcUcR+TJdgsxaYxNv/R
      N9UZA86iRq3KrZaldCkqQqcICohQhEZQd5pyvNmV/v/ILyeaigKkp/CaNYTW6FqA0OW2igKE
      kqjQR2iNCrxyXQhsOhJKkuEKgxkmUMSIfBdh+8h8G7J9lN3FDXfI91eReRucRUoHzmCNxNgI
      Y+oY08CY0t0qRIaUGVKUgpIyRsoMhEHJZBSWAgg1etGiu50YAxROYZwkd4rMqtFS087r7Oct
      umKaojH9ERPAjzx5DvEe5AOI90jiHlc7PVY6Pd5uD1gd5lyJJYUrXanTUcjJZo3HJmqcadV4
      crLGZH0CFU2A8nAqxOmojAkCyiADdxDaPMgydgZ90iJnZ9BnkGVs93v0s5StXg9jbTkoAwdL
      AWil0FLiKzWKd1F32O6izEgT4i4f+LuSiO7FP+4c2jhk4AHiYG4nJdVBbkGgbncSA+2N9kv0
      KKVUCYmvFa0wYqZWpxEEzNQaZfmkQAo5GmQTB+UER3+tzeaL57HdDSYWFRPzBQxWcf0tbPs6
      rruKHe6WV0RJhF9HBC3QPqI2iwibCBUg6rMIvwHKg3CSLCvo9GKSOCHJLd1On2GckMVDsmRI
      OhySJqM8hkATTUa0/dPsBR+AAJy1FMagtYezBXlh0J5/cLHhAU6M5RyYlGy4z+Vuykqny9s7
      u6y297m8s00xelintWHZMxQOclfGqiA0sfBwKiDOc3JjyEzptrw7R4t3b4vb67e4NXfurREG
      R9kKeUqhRsKo+z4TUUTd92mGIZHWDPf38I0hVJr63EmsV6ef2YPzOTeaBMvZ0muSp5g8IY/7
      5IMORVq6OVESpzROCPA0RkmckDi/FEBhbdm6jfIWlCyD0iLPOyhjqDVTUZ2pWo1WGNHSBQ12
      mWCbmogRNsHEXfauLRB3TxPUU6aXf4jnb+HMEFwOxpaBeLcujhN39eTcu8eycQgKAgp8ckIc
      isJ5ZIQYFJkLKJxmL4m4nNR4uwNb/Tb9tH/UAnBsXnqdv3rhMr/2m7/O1R98gxudhObyM/z8
      px8/CLZ8GGeGy4zh8vYWK/v7XNjaZL3XwZMKXyl8XdaQNd9HIKiLHFEk1MjwTEJADiYnsgmi
      SIikGdn1jkA4QumQ3F5a52gXgtwJ2kbSN5KeFfQJ2SkUAwIGqkYnM+zHMYW1o5wvDkytW7ex
      NhKJRIPQWCewzpGbAmPNyB3sKEw5x1OWxaU43jFhgBDiHcItW7rShT/K5R7tU1Lia42vFKGn
      8bUm9DwCrW4LRDhackhLDYlkAfExmv06EQUTkzcZNH20VkgVkI+iVgtLOZLuNAafAo+csBxJ
      dz4FmtwFWCSZyRhmMXEek+QJg3RIalKSPCHOYpKiXFdC0AhCnllc5JPLx45WADbZ44dvrCLT
      PZ585jHOrhq+9PHjvPXDF1j+1M8woUfeGHtrOuuHK3/10HAjP7ZJy48tRtsZFAnkMWRdyPoQ
      tyHZh7QM5eCO2yN0AOEUiQzoE9IlYCBrtI1iICNW20NurK3RNxb8AFmLKKxDCKh7PoHWI9NK
      lOIVUPeDUtRK4SmNN/Ku1Ebfe6NKKdQeRWHJs4xBe49hv0c3z1nf32M3idmLY9pZRuppciFL
      Ud4qtxD4uuz7RCOBBFoTeprI8/CVQkqNlgFKeAihRh8JTmAc5MaRFpY0T+mlfbIiIy1S4jwm
      zhNyc7ufJChF2fB9put1Fhotpmo1jk9MMKU95qRgY22N65ubRzkS7Lhy4TInHn2GzXM72KLA
      DyNAoj1bOk7E7TfFO+ce2mn2DgcBIgR9b0kgAofI+oi8h8x6iLQN+RDiPcKsTzi8xqzJ7hCI
      w0rF3nyNC+kyQxsyPTfL4lQ5cYFFYt3d17fgdovrgMLdUQFlKcUdnW9rLdoaNBAJsPUIawOe
      ajVGXiyLMYbhoM/Ofpu+NQytpe8cHWvpj/pH/Sxje9T3ufW7Ag5E4WuFtY7MFOTGkBbmrkoA
      QMuyj+QrReBpmmGtPFYpPK2ItGZSe/jiVjqpQ2Ux2xt9VqwldhbnBzA/c5QCSOl3+lxY/RYb
      169iZk8y3LhGZwHWO5qTIaVPmofTBHooCEJg9sfvL1JI25AOIN5Bpl1mswETww43ehlXd7bZ
      3b6PSuUdFdBdU8Bjke8IOdCUfR6JQ4ky0rSBZWJylK/MrYR9efBSdCUszkm6tiC2Od3C0DWW
      9VyxkQdsDkJ8IZnCR6UJXm7RxuDlBSJL8DyN73kI7VFIh5MCvPL9CEaWYzvC0/Q9D6H1yMNQ
      rgugoUKOu4BWX1MzH5AbdHN1hcmlU8Tbl3jx7E2e/dznWbpjSpVKAEdDmiQM+j2gvLZ3m5gC
      /Y7JdN85g573Y/z4d1Ek5ccWo1xsM9rOy9HhW+tFCrhyaYvye5OV5uFo3VnHIGmQ5C0cHigf
      h8TKCMQoHVXWQEisquFcOb+OyUcDn87dTlctDEVRlOHYhcFZh5IK7XkoX5Uv3vA/QvkAFRXv
      h49or7Oi4t6oBFAx1lQCqBhrKgFUjDWVACrGmkoAFWNNJYCKsaYSQMVYUwmgYqypBFAx1lQC
      qBhrKgFUjDWVACrGmkoAFWPNkQrApD3OvvxDXnnzMplx9HdX+eHzL7HdS47yZysq7pkjFcDO
      5jq1uZNE8R7Xt27w2tkVFpcmePPVc+XMChUVD5gjnR16/sTjFHGHc7s+czZld+EMJ04uEu98
      n14Kk97dOcG3kuMrKj4ojlQAaX+XC1fWOfX4U0yYLcz+aPZeM3p/lhB3JcJ/ZGeFqHhoOdKU
      yDe//3Vupg0mooBTTzzGzTdeoo+EcIkvf+6pg0TpKiWy4kFxpAIY9vbpDTNA0JycxnMp7V5M
      c3KK0Lv9sFcCqHhQVEnxFWNNZXRXjDWVACrGmkoAFWNNJYCKsaYSQMVYUwmgYqypBFAx1lQC
      qBhrKgFUjDWVACrGmiONBr0by8rZF3j9yjannvscz51e4KP8QqSKDwcfXAsQ77AyaPCrf+0X
      SW9eY3gPLx+pqDhqPjAB2DQmmp4lCBpMNAxx9kH9ckXFj+cDE4AMQpL9XdJsQHegCP33Pqai
      4qj54EygaJbjUZevf/3/w196hHoV+VzxEFDlA1SMNR+gF+jdVMnwFQ+aBzoOcKvxkVIeSkJ8
      URQ/9Tk+6HPb0VvWj4KjKnNRFByV4XBUZXbOHVgad/JAW4DDNnmEEEc2s4Qx5khMtFvlFeLw
      R0WOqsy3ZvP4MJXZOfcjK9oHKoDD5iinVTmKm32U5z3Kc39Yr/OPOvdD0QmuqHhQVLFAFWPN
      2ArAOUN7Z4vN7T2Mc9g8ZnNjg0Fa4HCkwx6dfowDinTI1uYG23td7K0G01k6e9tsbu+RG4s1
      Gbvbm2xu7ZKbo/JqOfJkwNbmJu1+gnOOQXePrZ19CutwtqDb2SfN7cH/x/0O/SQ/2DZZzNbm
      BvvdIQ5wtqCzv0d2ZI44RzLosLmxST/JcaPrttvuYZ3DFhntTofC3DJELL12myQ3B8dncY/N
      zU26wxTnLMPuPhsbG3SH6U9dOvW7v/u7v/tTn+VDSHftIq9fWaezeZmOWGD77edZa/d4+8oW
      jy3XePm1S9xY3+HUyWV2b17m6uomqxfPI+YeYSpS7Fw7y8tv32Cwt87NDkz7KReurLC3dpWN
      osXxmcbhF9qknD/7Bpu7+6xcvkFjOuLVF19md3uDgWghOtc5d/E8uX+M2ZaHSft8+1t/wU48
      xcmlCZzJefUH32ajm7B2+W30zEl6N85z8ew53NLjTB3F6Hze45WX32S/s8/KjT0aesAr5y6z
      dv06/vQi7ZVznL18jYmZ49RDRdbd4Gtf/yb+1HFmJyJM0uH5779AezBg5coKE3NzrF29xNbu
      DlcvrzP/yAn8n6LbMLYCCJoznDq+RMiAVM3Q67X50he/RLpxnfqpxzlz4hidnQ0WlpZoTE5S
      8zziQZ+J5RO0AsX5i5f45Od/ljNnHmHr2jnmHnmGuVZIkQ5R9XnmJ6PDL7RQzC0dY2G2RdIf
      Ir2E2vQzfPLxBa6tb/PkU88wGWbEdpKppmLt8jnkzCIyC1lemiBL9tjoeHzx85/k2ELEhYt7
      PPPcU7Rsj7i5dDQCkD7LJ04wMxkx6Gck2ZAzT32aJ+cEl9uSZ598HGX6+LVZIt9x8fwFmtMz
      1GpTTE9E7G/cwLVO8OnnnqYhE3ZjzeOnj6GxDFPL8vElvJ9CAGNrAmFzLr55lo4+xlPHakhZ
      ut48BMW73AIF6yvXyWWAErd2upFXQaC0wjnY27hOO3Z4WnAkngUBcXuLcxdWOPbk0zQlSKUQ
      UvJOV0ba2+TCRs6Ezun1exQWHAVCeOU/KA/JBzAAKaCzfo23VvZ4/Nkn8ZVACoFSEvMOU7G9
      epFdU0PbhF5/gHFgrEWN7o1SGnBkwzar6zvo0Ef8lBd6TAXg2L/yGnt6hqlIMkwNdthmdWON
      a/2Mls3Y3dmh2+vR7g7YXN1g5pEzLNWGXN8p7c7pmsdbF6+yduUc+0WTrLuJah3n1HKT9Rvb
      RyMAE3P2zUvMLC7j8hjlN9m8cYFr166hgxrJoMteu0unvU+SFES+5erVVba2Nkkt+N4kSfsq
      19c3Of/ya7SOHSPuddjv9Ojs75LkRyCIfJ/XL26xvDBDFg9peoorK9c4d2md6YmAQWefTqfH
      frtNLjQq63JjdY3N7V0KC1OTE6yvXGJtY40LV27QrIfs9AtOnzkN3XU6P2U34CM1DnA/yPo0
      9toNLuzD0pmP8dnPfoqX3rjIJz73BWTe58KFCyjPY2VthzPTirevXEQ3T/Gpk6Vt/8izn8G9
      9QbX1wfUW8uEkc+NlUskosanP3XmaGoWJ2m1Am5cvoAKajz7sed4dKHPWl/x3LMn6Fx/m7Vd
      A2KVwdKzfPGLJ8izHp2epK4BIj7/hU/xxtkLxMbnpFe2Wuu5B6sX6Ex+ltA75JJbTaPmuHLx
      AkFrlueefJrBhTcYTp3izHyTG2+9QT+B/sYqs889yxdPPM6gu49VNQIFtBb59DMF5y+vUKgQ
      P/CI210urfaZf/zTzNd+uuJV4wAVY82YmkAVFSWVACrGmkoAFWNNJYCKsaYSQMVYM7Zu0Irx
      wDlHlsRkxhFFEVp9hPMBKireSXf1NX7v336T6UkPM/NJ/tFvfBl5R+hEJYCKjzCG17/3LT7z
      t/4xv3BG8gdf+ddc2n2UZL3gyTMe5y9lVR+g4qOMJU1zmo0aKEWkEvZ2d7h4cYs82eXihfVK
      ABUfZTweeewUz3/3efZvXuJiMcfpKUc87LO3vsGwSCoBVHy0efQLf5MvLbT5k69+GxWG+I3T
      LNbXeHM/4rOfeqyKBaoYb6oWoGKsqQRQMdb8/2e2/COdqLFKAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Overall trend of market prices of different food items in India' width='192'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Price per unit of food items in each country' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAebUlEQVR4nO3dV5Bc2XnY8f/tnOPkPBhgkGaQsQAW2EDuLimSS5GSSKoULZetKrv8wCrb
      b35ylf1il/1iV9klm5aKFEmJccUgLqkNWOQwCJMwOaeenunpHG72w0pMWoDT0wNwr+b8ntDA
      nG/ubfTX3zn3nHuPZJqmiSDsUbZf9wEIwq+TSABhTxMJIOxpIgGEPU0kgLCniQQQ9jSRAMKe
      JhJA2NNEAgh7mkgAYU9z/PyLTCaDoii/rmMRhG0zdB0kCQCbbeff45JYCyRYT4Gv/8VXCEUO
      ougSn/mdj+y4KyO6QIIFeelojTEx9oDIvg6kGiKJBBAsqEgyE+OL//afkVtcoZYujEgAwYL8
      xP1ZvvmtN4l2tddUARy/+kcE4cNEZ30lQXtvP+GiTKQ+VFM0kQCCxUhIksbCzCJ2nwebN1ZT
      NNEFEizGRkNLM7pcZH/fKQ50NdYYTRCsxDTJpRJsbKa59vab3B2eqymc6AIJliIXkrzxxlsE
      gzbqD13kUl9TVe1NrcCdWw8oKHDi9DFRAQRrkStbSLY4bR2NDF+5yvTienWXQW1eTp07T29z
      hLJiiAogWIsv3MaxvgIKcOZsHbpuVBdAsrE6N4493k69xyGWQghWZKLrJnabhG6Y2Oy2bc8F
      GIUlvvmjQRrrA/QePikSQLAak8zmLD/5u0mev9jN/eEtXv/U8zvuy4sukGAxBmsLs8zMTBII
      m+w/ekbMBAt7iZ3Dp19BV0wKrla0SrmmaCIBBAsqMjo1jz9gQzbt9B3q3HEVEJdBBesxffT2
      tLO4NEHjgS6xHFrYYySNrbTK/v2tVMqVmkI9PgFMjYnxKYwnXCNKbSRQq7wMazmmxsT4JIYJ
      hVSCovarft5Af9KbtgPpVApDU1hb30QpZbh9/Spj8wme5fW7+bH7XL1+m62CTGFzkcuXL/Pu
      rYdk1ma5/N4V5hOZmtblb5dcSvKdr3yDueUJ/vbthxhGbR/Ax44BKhuzJFI5IkWNECVS6Qyh
      eBN2rchWJk+8qZX1tWW84XrSm2s4AjECDo3ERoaG1jY8jn8axUXenGc9lSFU0DATy0i+RrRM
      kpxi0tRQT2ZjDckbIey2U6iUcZsl1rQoMSlPQZVoaW7EXkuNBjaSSXKpFRzxboYGh+g7+zyG
      XNqdE9wmFS/PnT3I4P1Bjp09y8VzYcbnN5FLMv3nLpIcucV64DxNAftTPQ63r4Hf/qPfI5up
      8C8jgZrjPTYBZtdK9B9sIZlMks+tooUiLI6OEbFVcESjjIxOErBDdvkRP7k+hOmr42Knh6mc
      nUuNrXj+iQyv5xNFjh5qZ309QQRQshssra3hVHOU0pvceTiI5A5zoaeJhMPPybhOWg1RXB5h
      cG6Nix//HPvqvTUdQ2Z9nk0pxid6JZLuBsrJWe7PZXjt0tndOcltcrj8xMJuZFkjubBE975D
      lJanwGanrauR1XSRpkBt6/O3x2Dg6jv0v/QaEa8Tp9Ox43HAB35MTb1MYnWFZDqFIoXpjjrw
      eT1kbCVsdid+j5tM7v3LT4ZmcPDkOZoifqIeKM08YnYly4me2tZpfxiYepnVlRXWUpvIZpBg
      g4Sh6zhcHpxGAUXROHD8LC2RAPZMhsNHD+FLjWMWihSdMU71eZDLClBbAkQau+gK2JlcKIKS
      oGw/QMRf3J2T3Ca1UiSxushmXsefGCej+wgXChi6SiaZILeYoOdUzzM6GgO1kOJrf/5ndB69
      xGdfPb3jSI/5nrZz5qVXCPk8FPJZVmemyGRLHDlyiOXR+6TzCv1He9EreTxeP9rCDIZkx+GQ
      cEc66eyM7PiAPlzsnH7ho4T8778PNkBy2Jh9eJO06uLl185RXp9HM23Ud3XgkCQIddDrdyP7
      KpRooj7ur/koWjs68Pk8uLJFAk2nmJtbpKWts/bTq0JDYx2bBYX+48dQswn8lRyb6SxdDU1s
      raXo6jtN1FNjX2/bDDKFDDbZha7rNUXa1lIITdOwOxxImGia/vd/3ptMQ6dYLILdhd/r+YdH
      0wjPVIUffe9N1pdmkRpO8ceff3nbn0fTNNFVBdPmwGGXxFogwVp0tcjU+CwqUCkVCDXuo7er
      sYoEKDN0/T72th5667xiHkCwFqW0wRtf+zrv3hqkohpo2q+6Lv2LJMnLkWOH8DglwC4qgGBF
      BmvTw3z/J1dpOXKJT718oqouuZpLsZDX6Aj7xVogwVrk4jrf/uobqP4o+w4fY//Bjqram2qO
      23cfUNBN3MfOigQQrEWy2YnVN6LYbZTyGdaSW3Q2b/+Su+QMcemVV3/2WnSBhL1MDIIFCysz
      cGukpjVIogIIFmSiqRomINls2O323V0KIQgfbjJvfOXLaC4HSysbPP+Zf87FQw07iiS6QIIF
      6ej2MOfOn6ats5nk+NKOI4kKIFiQg+aYm5HpDV546TVc3vCOI4kKIFiQkwNHe8muTXNnZJX6
      iG/bLU3TYHp4gIGRaRS5JBJAsCKF8eFxPOFmDva0VNXSLKywZW+h3syRyMoiAQRrMU0TXbfR
      f+4sYYfK7MJade3Lefx1jdRHPeTLphgDCNZSyS/xZ//jq0R7DqBslvnCvzlZ1SVQW7iJrTv3
      yKGy/2iLqACCtbi8dbz8yiW8Zpnl5WlGxpermwhzRTl2pJOeo/3Ew8FfnAhTFKXmu+wF4Zkw
      TTRNJpurEItHdmciTNO0qtdXC8KzV+HtN39MINyNoZmcf+H47iSAz7f9y0mC8OvjwaZmuXfj
      GvsuvkooFBJLIYS9RCPedpY/fa2Z8elsTZFEAggWZGd1Zoh8fomCq6umSGI1qGAxJuVSGV0t
      s76Rp6G1mYDXLbpAwl6hszI/y/zMFBuFCk1bJ3j5ucM7jiYqgGBBZX7yw+u8+LGP4LJLSLbt
      7xH2y8REmGBBEtrWHF/52l9x+e54TZFEF0iwFF0u8O2vfplkGT72uc/S21jdoydNU2d69CGb
      spuTR/eJCiBYSym3grfhFF/47AUeXnlIvlSpbimEXiHU1EuXT2M1UxEJIFiL0xtCTs9w+do4
      5dI890fnq2ov2X041RRpZ4xmn1MMgoW9xZQ3uXx7jt6eFgK+oKgAghUVeXhvEswSD+9PVNcF
      svloa45QKpWwub2iAghWo3Hrx9/km2+OcvBQK219L/KJi0d3fBlUJIBgQSrj94fwNbXj9rhp
      iIXFTLCwlygMDt7Es5gDbHz6sy+JiTBhDzFdxGMBJocHsNfFxUbZwl6j4Qr38lufuYRNr+0G
      ridslC3z4P4w+hNGCInVRZQn7FG2uTTFarr82H/Pb62TWl9manlrO8f6a2KSy+WeySbQj6PI
      MqZpUK7IGLrKRnKdbKH8TDfK/vn3Qa0UKZQVAIr5LIqmkd5YZyOV3vVNwn+ZrpaYnljAoczz
      f781QG9PW03xHpsApbU5SoZGMqeST60zMjTIRrZEOrnC0OAgmZLG1mYSVVOZGRtmKZmhlE3y
      8MEgedkAdFa2KjQHJdKpDeZXkmyszPJoagHDNFicHmNw5BGE2pC3lqltr7+nxyiuce3qABml
      +v9YOZ9iMy/XfAzzs7OkE/PMJzKMDw6Q2NgisZGqOW41jNI6N67eIS2bbE6NcXtiBhOD6+/+
      LcsbacZGJ0ksTTMytfJUj8M0dYr5PM7oAX7n0+fRVbWmeI8ZBJtMrmTpaoiTTKxRklPE2zuY
      mZwg4jRp7mxncmyMgBPS80PcHl3GdCY43+kjU3H//Y31JXTVi1TJcGd0iXNH27j83gCGKaFW
      yjh8AVrq399ONWi3UwZq3/d79y0tpug7uY/NtRTZwjKLmQpxDyQKReSSiddpcPDYaSaHBijh
      5ey+OLfnU7jsTs70RMm4Xczdu0qiIvHiSy8T9la/k3pmfZ75zTpeudTI8FactrDE5Eb+KZzt
      460spThycj8bqxtEHD7CdpVsahFH7P31NNHGdg4f6uT+gwdAbd/KT+JwBTl+to+33rzNi6++
      gMNWWy/+gzfK1opk8yUMu41sUcIdMEiuroLDja5mSaysYnMHwJCxO720dnRSH4sS9UNy4hEL
      iTzHur3Y7O+XyY7u/QS8EvH6ZuL1DYQ9dpY2NyiqBcJARddx1nQaT4mpMb8wh+5wo7ob2B91
      cPL8ObYmx7lw+jgLY0naG3RWVlbJaA5aGsKYmkH/uRfQV8fRdQ29mKXsCGDTNyiUZMLe6u+7
      jjR2EdFLbGR0VDlNsPksoezYUzjhxzA15hdmUWxuFGeMkw1+4rEwD4aW6dlf99PuoVLaQsP9
      DA5IQk6M8+d/ucz+Q6f46PkjO470wRXA5uHcpRfwuBzIcoXlqUkC9U3URaMsjo0QaGilPh7H
      0GScTieeUArT6SPggp4jZ4nGI4BEwKVRdMXZ12TD4bRx+ng/RcUgGg3jD6YxHS6CjiLLNt8z
      eduqZWoK+05cpK0xRmJlGZvdhccuEYzFcGAnFgvi9Jg0dDYhy3kKhoQnUofTCXokhsduELUH
      KScXcbd0EvDs7KpzNBYjFu9meXWL3gOt3L1+DX99+y6f7eOZukp3/wVam+Ksry7jsrkI1gUp
      NRvEQ34UyUtqZpS72QBHjx17BkdkR/JIFOc3yHY8foy5HU91IkxXS+TLEpGQ97E/U8mmMQIR
      fHax47SwXXm+8/UfoMgaUqiDL/z2zucBxEywYEEmmXSa5PIs9ng3+1q2PxdgmhWGbt7H29FL
      d8wtZoIFayluTfJf/9OX8LY0EQn5aTvkZF9LvIoIbg4e7mW5pGMakkgAwVq8kW7+5F/9MRvp
      HKnUFrFIddcOJUnC/nPdbZEAgqWYusr6yjIr6RKS3UEwVF0CmGqOWzfvsKEYOE+dFwkgWItc
      Wufu3Uf46t9/IO7icpJDXY3bbi85Q7zw8U/87LUYBAt7mVgMJ1iYwuzUUk3rtEQCCBZmIxIN
      1hRBjAEEC1J552++zUq2gqLZeOU3P09X3eMnW59EVADBgiqky2H+8HdfJxqUGLj2aMeRRAUQ
      LMhHV6PBl77yBkdPHscf2vm6KJEAggVplEsawWgMX7CZ/gMN225pmibZzTXK+GiM+UUXSLAi
      G16/h1Jmk8XVzeqaKlsMT66xODHKZqYgKoBgTa29x2nq3k9WcVXVzsiuEz9wgi5lkrmC2Chb
      sBi1kubtH/4d64USi9NrfPZP/0VV7SVfkMJCgnW9RKhJEl0gwVoMXSaTzmFzuolF66iPh6pq
      L/lbiZMg44zRFPaJpRCCNelyidHhBxTt9Zw/2SueDLebstksslz70xyEp0Xn0fADvL4mUAok
      k0mRALspHA7/ug9BeKIiV5YXyRU38bd0c/75BpEAwl7ioq37AIpm4Iw21xRJDIIFC5JZXMiw
      f38ry4trNUUSg2DBkhJzowxPJ+k7c47maPXPWvoHogskWIzKyMADZqcnSOTKKO4Yn3zxuHgs
      irCXVLg/MM2pM301RxIVQLAgk9HL3+XG4H0OHTnNKxfEFknCHqFrZUbv3SNZsXHy5EniT3jq
      4AcxDYVC2cQlaeB0i6tAgrUU0wvMrBj0tjt48/s3SWUL1d0TbBoYhklqYYa1rbxIAMFaPIE6
      fLY0D0fW8PvzTM4nqgtgc1PeWqToa6DJ5xBdIGFvMUpr/PDdMTrb62hu7hQJIFiNiaamuXFt
      nufOdzEwsMjFF05s/+G4uko6+/7mIv5gWFwFEqxG5+HVd/jRm4+YW+ig+8QLVbWW7E5isdjP
      XosKIFiPzvjALfRwKz6/n66WerEYTthLyjwYGSIUUVAM6Pztj4iNsoU9xPTS2RpnfOwB4c72
      mjbKFhVAsCCFsh7j1Y/Us5wv1BRJVIBfwVCKTI6Ps5kr/fTvTNMkl8s+sZ1cKqEaxq4cQ7FQ
      wDQ0Mtk8ulpmenyMlY3MM90o21BLTE1MsJktoZSyTIxNkCnKaEqJqbFRZhbXnslm4qqc4cbl
      WxSz0/zFt2/T1Bj71Y2eQCTAk5gGI4PDeENh0HV0TUNRNTBNpqenMQ0dRVEwDBNd11AUBU1T
      UTWNVGKVXKmMphvImQQbBRVNVVFVreoP7srSEsnlGTYLKiMP7uMORUGvbYPoqpgGj4aGcQdD
      mLrM4MMRguEAw0PDlAo5FFzouSUWkrXt2LgddoeX7gP7OX7+k/y7L/4hHU3RmuKJLtCTGEUM
      dz1tLc1Iap6rV69iAN19pwGTicE7bBRUPNE2zMwcFdlAtruwaQ66O8PMDD7AwM2RJolMOMLk
      zbdYSiu8+vpnqfNt/7snsz7PjC3Ob7zYymCyAa+RZ3S5TEtj/VM79V9glNGcMdpbmpHUFMuh
      DlpaWsmubyCbBpVSCUPS8dmf/vepze6mua2eH3/vXS5+7FU8zuo3Hv+FeLt0XP802bzopU3K
      ikopl8Ie7eL4/hYKZRkwKCk2zpw9gVkuEqhr4fzJY+w73E9vawzd5qbv1GliXtAM0Ip5nHXt
      dNZ7yZer+/aONHZxuMnDUlJDKSXxN+4j5nuG28ra3JjlNEVZpag6kLNryEqFrbKMS5KQbBL1
      7YdpjT+73Z6l8gbf+ta3uHpvoqY4ogI8ieTg2LFeBu7coa23j87AEhObEif642Q9BkGXyf17
      oxzsP4lNK2H3uYnrduzORgybyqN792je30fMK+N1RjBTc+hN+4j5qnvb6xsbCUeCJNbTHDt+
      iAe3rxNq7nlKJ/0BJAd9/b3cG7hD8/6jHDvawcDte+zrO4HXK3GgN0rQ73l2x4NErrDByoKC
      K9pVWyQxESZYT5Hv/vX3yW2lkOKH+aMvfFTcDyDsDaahkc8XqcgVsqkk7lgb7Y3RKjbKLvPg
      6l3cnQc5UOcVXSDBWkrZef7bf/xfeDu66GppoKnHSXvj9q8ESZKX/hNHWchrYNpEAgjW4gt3
      88X/8O/ZSK4zOTWDrmk1xRMJIFiKpuQZuHaNzYqB0+PlaFdLVe1NNcet2wOkVRPXiedEAgjW
      oqtF1jdyOII+tEqRhaV1upu3PxssOUO88NrHf/ZaDIKFvUxMhAkWVmFkcKqmNUiiAggWZGIa
      JiYmlbKK1+8RN8QIe4nKj77xV2wpOtm8zMuf+T2Otu3skfaiCyRYkEzBiPH7v/s6DfU+Ju5O
      7TiSqACCBXnpqtP4P1/5Ac9fOo83uPM9AkQFECzIxBuMEgv7yBQd9LRGtt/SNFmbn2Bifg1d
      lUUFEKzIJJ/LUSyU0Ku9BlRZZy4lETYWWQ94RAIIVmTj4MnnCNXPkaO6206N/BaR9kN0qRPM
      FcVG2YLFyMUk3/7ad6m4vGRWc3zuX/9JVe2lQJTs+CwLRp5oZ5MYAwjWYrM5qKurw+tyYBgq
      Zbm6u+skbxOdERWprp3GSEBMhAnWZGgKq8sL5DUvh/a3iYmw3SQ2yv6wU7l76zr+QBuGAbGQ
      SyTAbhIbZX/YlSltJZh6lKDxyBk+0iA2yhb2FBsdB87Qf9ZHprLzLVLfjyQIlqOzMDWLIhdY
      WtusKZIYBAsWY2IYJrnUKrNLW+w7eJCw3y26QMJeoTP28AGzU5Os58skiiafeOH4jqOJCiBY
      UIVrV4a49OJzNUcSYwDBgkzWR67yP7/0Zd66OSruCBP2DkOr8Pb3v8NyDj7+W5+jJeSqqr1p
      miQWp8mobg50NooKIFhLKbNExdXNp185xN1rY2h6letBtQJFw4crv85iqigGwYK12JxOElMP
      +F7CRiaj8XbIxscu9W+7veQI0BQpMVeK0O0VG2ULe4yp5RkeS3D4SA9GqSi6QIIVVZiZWgFT
      ZmZ6uboukKqR2VrlxrWrZDRRAQTL0Rh457t8429HOdrXhq/pOJ/7jbPi8ejCXmGiqQUeDc3T
      0t2O2+Ml4BMzwcKeIeFwOpkcepvJhX6cTje/+elLO44mxgCC9ZgSdoed6cG7VJy17UsmKoBg
      QSY9/R+h/5TKWrG2BBAVQLAU0zSoyCZ2eZ7vvTVMd097TfFEBXgik7nR+8xv5AnGWjjZ34v9
      MaMtRVlnaclFT08UpZwnV4G6aHBXjuLhjbfYkl30HOknPfuQZFal98wFtsZvs5HXOHrhZdoi
      biYe3mI1oxBu7ODkoW6kXdtJ1WRh7AEz6zmC0SaO1qv84JHO5145wcBb38fVc4bK4kMqphtv
      XQfn+vfv1i/+R9TKFm//4F1KQFuzh9m5VVrjB3ccTyTAkxglMlqAU0cbWE7rVDJr3BuaJNrS
      Q0TbYGZjC9P0YEg2zpzsYGZkiIXlMKeOdVNW7MyM3GUxpXHyudNEvNWtWfm5g6Bc0QnX1VEX
      gay/m1dP+BlaXMcR7ORj58IMjqdoCwYoSo0cOyiRLDl39W3AqLAl+zjT18BiSkWymcQDkC0V
      kPETtoG7qYvzhw4zNHAPBdjp2f4qLm8dn/r8p7l5/REXLp6qOZ7oAj2RHUNV8ITqkeQcW6k0
      qmkwPTODabo5fekCDfFmDnQ1oKsG3UdOcbTeQSInU66U2NrKU95cYTVd3PkhmNB/9gLd9V4e
      TS2iawq6qmKzO9F1BV1WkFxOkOzoaoVgrAmlmK5pheQ/ItkwNQVXsA6HkkcxoD4eY2H4IZHu
      n+1XbBo6qmk+gw+VydL9t3ZlNahIgCexeehodHPz5i1yqh2P24Xd4aapPoY3EMBpsxMM+fF4
      fLgcblbnhpjI2mgNe/B53LhcTkLxBgLuGr6RTZ2VuSmGJpZobOgm4slz7f4crU1NBJ1FrgzM
      09kZA1uA1qjJjZu3kdn58/I/kOSmo8nH7Zu3SMs2XB4/dY11lE0P++r8+L1u1NwGV65eJ9jY
      8Qy6FS7aD/bg1TT0GqexxESYYEFZvvHlN3C6oziC9bz+yQs7TnhRAQQLCnHh5Zeoj2rUd1a5
      S6SpMjMyyPx6Bq0ilkMLFlPKzPKl//0G3roQAK3ebNUxIpE4aU3G0BwiAQRrcQdaeP7ScZJF
      HUyJ/V3VbY4hSU5CIS/p/PsbbIsukGApkmQnEo3jczlQ5SKpdK6q9qZWZHTkEVPjY6TyiqgA
      grWUs/P85f/7a3wtjYQCPuzRQnUBbG72HT1GN+DxiadDC3uc6AIJFqaxsb4lJsKEvcqgVCzX
      FEGMAQQL0rj33tsspIrYHF4CTY3EfTv7KIsKIFhQmYWEwcc/ehatkODdd0d3HElUAMGCfNQH
      S3znb/6O+vZ2guHt7xP8y0QCCBakopQ1JF+MI33naK/f/n0XpmmiqQoGNlxOu+gCCVbk5EB/
      H0EjzbvXH1LVnT96getXrnHlyg3SmayoAIIVaRRKOuc++ps4bPaqWhrpZer6XqRLmWQx/yzu
      XRCEXaRrZQZv3uLh0F3++3/+LwwtpapqL7ncyIU8hZKO1yWuAgkWoxSTvHf5Do5QI32HT3D2
      eE9V9wJIoU5cW4+YKdhoDnnFUgjBYkwTTVPJpze5e/sGxA7y2sV+8WjE3SQ2yv6wM1hZXsDl
      CmMi0dAQ3XEkMQj+AGKj7A+7PJd/PITL1Ybq9HCk7+CO+/JiDCBYkI+OtibyxQQtPV01PQBA
      JIBgQSUWEzb+4A9eZ21mXqwGFfaaACd6/Xz1G2/Rf+6EqADCXqIxMTzEciKH220nsbpeUzQx
      CBYsxk53bzdl2c7Jnlacbm9N0UQFECxGwuV2M3XvHa7fG2JuebOmaKICCJZimgazIw9QQu2c
      6OkkGKzuCdymaWKaBqYpYbNJIgEEaylnlrg9nOTEATeTyzqfeqHKORstz62bg5SKFQ6dPiUS
      QLAWXSuxOjONXHEyOzuCy/5JXn2+b/tXghxBzl84y8SjSTwOsU2qYDGmaSBX5J9e+7c7nDid
      jm0ngGmojI2M0d57BLdWEYPg7VhaWnrCv+qsLK1gPMXfv7K0hFLOMjW3wsbyNFfee4/7Y3M8
      66+upaUllGKam9fe48qNu+RljQc33+G9964wu5Z+JscgSTY8XieKrOP1OCmXKtUFKG8yu5zk
      3q1rpCpiELwthUKBSn6Th0MTtPb246VCejNJfXMLE4+Gyat+Al6TwbF5DvSdhPwaS8trtPSe
      oq3OX/Pvz2fSbKXW6TjYx8zoOOcunEdR9V04s+oUCgW0Upr9x87jlxPMrqbwRJs5fmA/9+8P
      0dl8mupuT9kJg7mx2/zND8c4e66D+aSb3/+dl7bdWvI38/onf/Y8UVEBtsEwTWamZjhy6jTJ
      mSkWF6cJNHaTXF7g0MnztNcHKRYLmHqR4ZE5NlM5jp0+RjqR3JXfX8wm2chruJ064Ka0leD6
      nYe7ErsahmmiGwZulxO324Wmv5+ENrsTpyQ91Sr487z+CO2dLURi7Xzy4+fFTPDTostF7t68
      TFa2E/A5uXvzBhWnF7cvSnPMj9cJA7dvsJIqktnaArsTOyYOjw+P24XjcTvqVSkYb+VsXyfj
      Ewn8jgwPxuewOXZ5H7An0JUSAzffI1Ox0VAX4+61d3j3zjhN9VE2l6e5/O47aL4Yz+aIbDR1
      HCLsWGNhZYsHD8drWgv0/wFmGj2+Oj+SNwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Procurement of food items for Rohingyas refugees in Bangladesh and Myanmar' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='What about prices of milk in different states in India?' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
