test <- c()
newTest <- c(test, tdf[,15][1])
newTest
newTest[] =-2
test
test <- c()
newTest <- c(test, tdf[,15][1])
newTest
newTest[] =-2
test <- newTest
test <- newTest
test
test <- c()
newTest <- c(test, tdf[,15][1])
newTest
newTest[] =-2
test <- c(test,newTest)
test <- c(test,newTest)
test
test <- c()
newTest <- c(tdf[,15][1])
newTest
newTest[] =-2
test <- c(test,newTest)
test <- c(test,newTest)
test
if (is.na(movie)) {
value = sum(((tdfn[movieId,-userId]-Average[-userId])*pearsoncorr[userId,-userId]),na.rm = T)/totalSim
newPrediction <- c(movie)
newPrediction[] = value
test <- c(predictions, newPrediction)
sort(predictions,decreasing = TRUE)[1:5]
View(critics)
View(critics)
m1 <- t(rdf1)            ## Traspose the data frame
rdf <- data.frame(read.csv("critics.csv", header = TRUE, stringsAsFactors = FALSE))
rdf1 = read.csv("critics.csv")
library(data.table)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(grid)
ratingV <- as.numeric(as.vector(rdf[rdf$User=="Victoria", 2:21]))
ratingN <- as.numeric(as.vector(rdf[rdf$User=="Nuria", 2:21]))
r1 <- cor(ratingV, ratingN, method = c("pearson"), use = "pairwise.complete.obs")
paste("Correlation between Victoria and Nuria is:", r1)
rating_Victoria <- as.numeric(as.vector(rdf[rdf$User=="Victoria", 2:21]))
rating_Nuria <- as.numeric(as.vector(rdf[rdf$User=="Nuria", 2:21]))
p1 = qplot(rating_Victoria, rating_Nuria, geom = c("point","smooth"))
r1 <- cor(rating_Victoria, rating_Nuria, method = c("pearson"), use = "pairwise.complete.obs")
paste("Correlation between Victoria and Nuria is:", r1)
rating_Maria <- as.numeric(as.vector(rdf[rdf$User=="Maria", 2:21]))
rating_Nerea <- as.numeric(as.vector(rdf[rdf$User=="Nerea", 2:21]))
p2 = qplot(rating_Maria, rating_Nerea, geom= c("point","smooth"))
r1 <- cor(rating_Maria, rating_Nerea, method = c("pearson"), use = "pairwise.complete.obs")
paste("Correlation between Maria and Nerea is:", r1)
rating_Chris <- as.numeric(as.vector(rdf[rdf$User=="Chris", 2:21]))
rating_Jim <- as.numeric(as.vector(rdf[rdf$User=="Jim", 2:21]))
p3 = qplot(rating_Chris, rating_Jim, geom=c("point","smooth"))
r1 <- cor(rating_Chris, rating_Jim, method = c("pearson"), use = "pairwise.complete.obs")
paste("Correlation between Chris and Jim is:", r1)
grid.arrange(p1, p2, p3, nrow = 1)
m1 <- t(rdf1)            ## Traspose the data frame
colnames(m1) = m1[1,]  ## Assign the column names
m1 =m1[-1,]            ## Eliminate first row
## Convert it to data frame in order to transform values to numeric
d2 <- data.frame(m1)
d2[1:20] <- lapply(d2[1:20], function(x) as.numeric(as.character(x)))
d2.1=d2[1:20]
# Keep out movies that Victoria hasn't watched
d2.v=d2.1[complete.cases(d2.1$Victoria != "NA"),,drop=F]
## Correlation table
d3=cor(d2.1[,unlist(lapply(d2.1,is.numeric))],use="pairwise.complete.obs")
## Select the movies that Victoria hasn't watch yet
MOVIES=rownames(d2.1[is.na(d2.1$Victoria == "NA"),15,drop=F])
## User ratings for all the movies that Victoria hasn't watch yet
dff=rdf1[1:20,c(MOVIES)]
## Calculate the mean for all the users
user_mean = rowMeans(rdf[,2:21],na.rm=T)
## Calculate the difference between the Rating of each movie with its respective User Mean
almostdiff=cbind(dff,user_mean)
diff = (almostdiff-almostdiff$user_mean)[-15,-8]
## Multiply the previous Difference by each user Correlation that Victoria.
almostdiff2=cbind(diff,corr=(d3[,15])[-15])
df3=colSums((almostdiff2*almostdiff2$corr)[-8],na.rm=T)
## Divide it by the Sum of all the Pearson correlations
df3=df3/sum(abs((d3[,15])[-15]),na.rm=T)
## Finally sum all the movie results with Victoria rating's mean
df3=df3+ mean(d2.v$Victoria)
head(sort(df3,decreasing=T),n=5)
m1 <- t(rdf)            ## Traspose the data frame
colnames(m1) = m1[1,]  ## Assign the column names
m1 =m1[-1,]            ## Eliminate first row
## Convert it to data frame in order to transform values to numeric
d2 <- data.frame(m1)
d2[1:20] <- lapply(d2[1:20], function(x) as.numeric(as.character(x)))
d2.1=d2[1:20]
# Keep out movies that Victoria hasn't watched
d2.v=d2.1[complete.cases(d2.1$Victoria != "NA"),,drop=F]
## Correlation table
d3=cor(d2.1[,unlist(lapply(d2.1,is.numeric))],use="pairwise.complete.obs")
## Select the movies that Victoria hasn't watch yet
MOVIES=rownames(d2.1[is.na(d2.1$Victoria == "NA"),15,drop=F])
## User ratings for all the movies that Victoria hasn't watch yet
dff=rdf1[1:20,c(MOVIES)]
## Calculate the mean for all the users
user_mean = rowMeans(rdf[,2:21],na.rm=T)
## Calculate the difference between the Rating of each movie with its respective User Mean
almostdiff=cbind(dff,user_mean)
diff = (almostdiff-almostdiff$user_mean)[-15,-8]
## Multiply the previous Difference by each user Correlation that Victoria.
almostdiff2=cbind(diff,corr=(d3[,15])[-15])
df3=colSums((almostdiff2*almostdiff2$corr)[-8],na.rm=T)
## Divide it by the Sum of all the Pearson correlations
df3=df3/sum(abs((d3[,15])[-15]),na.rm=T)
## Finally sum all the movie results with Victoria rating's mean
df3=df3+ mean(d2.v$Victoria)
head(sort(df3,decreasing=T),n=5)
m1 <- t(rdf)            ## Traspose the data frame
colnames(m1) = m1[1,]  ## Assign the column names
m1 =m1[-1,]            ## Eliminate first row
## Convert it to data frame in order to transform values to numeric
d2 <- data.frame(m1)
d2[1:20] <- lapply(d2[1:20], function(x) as.numeric(as.character(x)))
d2.1=d2[1:20]
# Keep out movies that Victoria hasn't watched
d2.v=d2.1[complete.cases(d2.1$Victoria != "NA"),,drop=F]
## Correlation table
d3=cor(d2.1[,unlist(lapply(d2.1,is.numeric))],use="pairwise.complete.obs")
## Select the movies that Victoria hasn't watch yet
MOVIES=rownames(d2.1[is.na(d2.1$Victoria == "NA"),15,drop=F])
## User ratings for all the movies that Victoria hasn't watch yet
dff=rdf1[1:20,c(MOVIES)]
## Calculate the mean for all the users
user_mean = rowMeans(rdf[,2:21],na.rm=T)
## Calculate the difference between the Rating of each movie with its respective User Mean
almostdiff=cbind(dff,user_mean)
diff = (almostdiff-almostdiff$user_mean)[-15,-8]
## Multiply the previous Difference by each user Correlation that Victoria.
almostdiff2=cbind(diff,corr=(d3[,15])[-15])
df3=colSums((almostdiff2*almostdiff2$corr)[-8],na.rm=T)
## Divide it by the Sum of all the Pearson correlations
df3=df3/sum(abs((d3[,15])[-15]),na.rm=T)
## Finally sum all the movie results with Victoria rating's mean
df3=df3+ mean(d2.v$Victoria)
head(sort(df3,decreasing=T),n=5)
m1 <- t(rdf)            ## Traspose the data frame
colnames(m1) = m1[1,]  ## Assign the column names
m1 =m1[-1,]            ## Eliminate first row
## Convert it to data frame in order to transform values to numeric
d2 <- data.frame(m1)
d2[1:20] <- lapply(d2[1:20], function(x) as.numeric(as.character(x)))
d2.1=d2[1:20]
# Keep out movies that Victoria hasn't watched
d2.v=d2.1[complete.cases(d2.1$Victoria != "NA"),,drop=F]
## Correlation table
d3=cor(d2.1[,unlist(lapply(d2.1,is.numeric))],use="pairwise.complete.obs")
## Select the movies that Victoria hasn't watch yet
MOVIES=rownames(d2.1[is.na(d2.1$Victoria == "NA"),15,drop=F])
## User ratings for all the movies that Victoria hasn't watch yet
dff=rdf1[1:20,c(MOVIES)]
m1 <- t(rdf)            ## Traspose the data frame
colnames(m1) = m1[1,]  ## Assign the column names
m1 =m1[-1,]            ## Eliminate first row
## Convert it to data frame in order to transform values to numeric
d2 <- data.frame(m1)
d2[1:20] <- lapply(d2[1:20], function(x) as.numeric(as.character(x)))
d2.1=d2[1:20]
# Keep out movies that Victoria hasn't watched
d2.v=d2.1[complete.cases(d2.1$Victoria != "NA"),,drop=F]
## Correlation table
d3=cor(d2.1[,unlist(lapply(d2.1,is.numeric))],use="pairwise.complete.obs")
## Correlation table
d3=cor(d2.1[,unlist(lapply(d2.1,is.numeric))],use="pairwise.complete.obs")
library(data.table)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(grid)
rdf <- data.frame(read.csv("critics.csv", header = TRUE, stringsAsFactors = FALSE))
rdf1 = read.csv("critics.csv")
ratingV <- as.numeric(as.vector(rdf[rdf$User=="Victoria", 2:21]))
ratingN <- as.numeric(as.vector(rdf[rdf$User=="Nuria", 2:21]))
r1 <- cor(ratingV, ratingN, method = c("pearson"), use = "pairwise.complete.obs")
paste("Correlation between Victoria and Nuria is:", r1)
rating_Victoria <- as.numeric(as.vector(rdf[rdf$User=="Victoria", 2:21]))
rating_Nuria <- as.numeric(as.vector(rdf[rdf$User=="Nuria", 2:21]))
p1 = qplot(rating_Victoria, rating_Nuria, geom = c("point","smooth"))
r1 <- cor(rating_Victoria, rating_Nuria, method = c("pearson"), use = "pairwise.complete.obs")
paste("Correlation between Victoria and Nuria is:", r1)
rating_Maria <- as.numeric(as.vector(rdf[rdf$User=="Maria", 2:21]))
rating_Nerea <- as.numeric(as.vector(rdf[rdf$User=="Nerea", 2:21]))
p2 = qplot(rating_Maria, rating_Nerea, geom= c("point","smooth"))
r1 <- cor(rating_Maria, rating_Nerea, method = c("pearson"), use = "pairwise.complete.obs")
paste("Correlation between Maria and Nerea is:", r1)
rating_Chris <- as.numeric(as.vector(rdf[rdf$User=="Chris", 2:21]))
rating_Jim <- as.numeric(as.vector(rdf[rdf$User=="Jim", 2:21]))
p3 = qplot(rating_Chris, rating_Jim, geom=c("point","smooth"))
r1 <- cor(rating_Chris, rating_Jim, method = c("pearson"), use = "pairwise.complete.obs")
paste("Correlation between Chris and Jim is:", r1)
grid.arrange(p1, p2, p3, nrow = 1)
trdf <- t(rdf)            ## Traspose the data frame
colnames(trdf) = trdf[1,]  ## Assign the column names
trdf =trdf[-1,]            ## Eliminate first row
## Convert it to data frame in order to transform values to numeric
d2 <- data.frame(trdf)
d2[1:20] <- lapply(d2[1:20], function(x) as.numeric(as.character(x)))
d2.1=d2[1:20]
# Keep out movies that Victoria hasn't watched
d2.v=d2.1[complete.cases(d2.1$Victoria != "NA"),,drop=F]
## Correlation table
d3=cor(d2.1[,unlist(lapply(d2.1,is.numeric))],use="pairwise.complete.obs")
## Select the movies that Victoria hasn't watch yet
MOVIES=rownames(d2.1[is.na(d2.1$Victoria == "NA"),15,drop=F])
## User ratings for all the movies that Victoria hasn't watch yet
dff=rdf[1:20,c(MOVIES)]
## Calculate the mean for all the users
user_mean = rowMeans(rdf[,2:21],na.rm=T)
## Calculate the difference between the Rating of each movie with its respective User Mean
almostdiff=cbind(dff,user_mean)
diff = (almostdiff-almostdiff$user_mean)[-15,-8]
## Multiply the previous Difference by each user Correlation that Victoria.
almostdiff2=cbind(diff,corr=(d3[,15])[-15])
df3=colSums((almostdiff2*almostdiff2$corr)[-8],na.rm=T)
## Divide it by the Sum of all the Pearson correlations
df3=df3/sum(abs((d3[,15])[-15]),na.rm=T)
## Finally sum all the movie results with Victoria rating's mean
df3=df3+ mean(d2.v$Victoria)
head(sort(df3,decreasing=T),n=5)
ratingVictoria <- as.numeric(as.vector(rdf[rdf$User=="Victoria", 2:21]))
user_names <- rdf[rdf$User!="Victoria", 1]
corr_vector = vector(mode="integer", length=20)
for(i in 1:nrow(rdf)) {
if(rdf[i,1]=="Victoria") {
corr_vector[i] = -1
} else {
userrating <- as.numeric(as.vector(rdf[i, 2:21]))
corr_vector[i] = cor(ratingVictoria, userrating, method = c("pearson"), use = "pairwise.complete.obs")
}
}
victoriaVsOthers <- rdf %>% mutate(victoriacorr = corr_vector)
trdf_d_by_pcgt4 <- victoriaVsOthers %>% select(User, victoriacorr) %>% arrange(desc(victoriaVsOthers$victoriacorr))
print(trdf_d_by_pcgt4[1:5,])
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(grid)
rdf <- data.frame(read.csv("critics.csv", header = TRUE, stringsAsFactors = FALSE))
ratingV <- as.numeric(as.vector(rdf[rdf$User=="Victoria", 2:21]))
ratingN <- as.numeric(as.vector(rdf[rdf$User=="Nuria", 2:21]))
r1 <- cor(ratingV, ratingN, method = c("pearson"), use = "pairwise.complete.obs")
paste("Correlation between Victoria and Nuria is:", r1)
rating_Victoria <- as.numeric(as.vector(rdf[rdf$User=="Victoria", 2:21]))
rating_Nuria <- as.numeric(as.vector(rdf[rdf$User=="Nuria", 2:21]))
p1 = qplot(rating_Victoria, rating_Nuria, geom = c("point","smooth"))
r1 <- cor(rating_Victoria, rating_Nuria, method = c("pearson"), use = "pairwise.complete.obs")
paste("Correlation between Victoria and Nuria is:", r1)
rating_Maria <- as.numeric(as.vector(rdf[rdf$User=="Maria", 2:21]))
rating_Nerea <- as.numeric(as.vector(rdf[rdf$User=="Nerea", 2:21]))
p2 = qplot(rating_Maria, rating_Nerea, geom= c("point","smooth"))
r1 <- cor(rating_Maria, rating_Nerea, method = c("pearson"), use = "pairwise.complete.obs")
paste("Correlation between Maria and Nerea is:", r1)
rating_Chris <- as.numeric(as.vector(rdf[rdf$User=="Chris", 2:21]))
rating_Jim <- as.numeric(as.vector(rdf[rdf$User=="Jim", 2:21]))
p3 = qplot(rating_Chris, rating_Jim, geom=c("point","smooth"))
r1 <- cor(rating_Chris, rating_Jim, method = c("pearson"), use = "pairwise.complete.obs")
paste("Correlation between Chris and Jim is:", r1)
grid.arrange(p1, p2, p3, nrow = 1)
trdf <- t(rdf)            ## Traspose the data frame
colnames(trdf) = trdf[1,]  ## Assign the column names
trdf =trdf[-1,]            ## Eliminate first row
## Convert it to data frame in order to transform values to numeric
d2 <- data.frame(trdf)
d2[1:20] <- lapply(d2[1:20], function(x) as.numeric(as.character(x)))
d2.1=d2[1:20]
# Keep out movies that Victoria hasn't watched
d2.v=d2.1[complete.cases(d2.1$Victoria != "NA"),,drop=F]
## Correlation table
d3=cor(d2.1[,unlist(lapply(d2.1,is.numeric))],use="pairwise.complete.obs")
## Select the movies that Victoria hasn't watch yet
MOVIES=rownames(d2.1[is.na(d2.1$Victoria == "NA"),15,drop=F])
## User ratings for all the movies that Victoria hasn't watch yet
dff=rdf[1:20,c(MOVIES)]
## Calculate the mean for all the users
user_mean = rowMeans(rdf[,2:21],na.rm=T)
## Calculate the difference between the Rating of each movie with its respective User Mean
almostdiff=cbind(dff,user_mean)
diff = (almostdiff-almostdiff$user_mean)[-15,-8]
## Multiply the previous Difference by each user Correlation that Victoria.
almostdiff2=cbind(diff,corr=(d3[,15])[-15])
df3=colSums((almostdiff2*almostdiff2$corr)[-8],na.rm=T)
## Divide it by the Sum of all the Pearson correlations
df3=df3/sum(abs((d3[,15])[-15]),na.rm=T)
## Finally sum all the movie results with Victoria rating's mean
df3=df3+ mean(d2.v$Victoria)
head(sort(df3,decreasing=T),n=5)
ratingVictoria <- as.numeric(as.vector(rdf[rdf$User=="Victoria", 2:21]))
user_names <- rdf[rdf$User!="Victoria", 1]
corr_vector = vector(mode="integer", length=20)
for(i in 1:nrow(rdf)) {
if(rdf[i,1]=="Victoria") {
corr_vector[i] = -1
} else {
userrating <- as.numeric(as.vector(rdf[i, 2:21]))
corr_vector[i] = cor(ratingVictoria, userrating, method = c("pearson"), use = "pairwise.complete.obs")
}
}
victoriaVsOthers <- rdf %>% mutate(victoriacorr = corr_vector)
trdf_d_by_pcgt4 <- victoriaVsOthers %>% select(User, victoriacorr) %>% arrange(desc(victoriaVsOthers$victoriacorr))
print(trdf_d_by_pcgt4[1:5,])
library(data.table)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(grid)
rdf <- data.frame(read.csv("critics.csv", header = TRUE, stringsAsFactors = FALSE))
#rdf1 = read.csv("critics.csv")
ratingV <- as.numeric(as.vector(rdf[rdf$User=="Victoria", 2:21])) # Extract Victoria's ratings
ratingN <- as.numeric(as.vector(rdf[rdf$User=="Nuria", 2:21])) # Extract Nuria's ratings
r1 <- cor(ratingV, ratingN, method = c("pearson"), use = "pairwise.complete.obs") # Correlation coefficient
paste("Correlation between Victoria and Nuria is:", r1)
rating_Victoria <- as.numeric(as.vector(rdf[rdf$User=="Victoria", 2:21]))
rating_Nuria <- as.numeric(as.vector(rdf[rdf$User=="Nuria", 2:21]))
p1 = qplot(rating_Victoria, rating_Nuria, geom = c("point","smooth"))
r1 <- cor(rating_Victoria, rating_Nuria, method = c("pearson"), use = "pairwise.complete.obs")
paste("Correlation between Victoria and Nuria is:", r1)
rating_Maria <- as.numeric(as.vector(rdf[rdf$User=="Maria", 2:21]))
rating_Nerea <- as.numeric(as.vector(rdf[rdf$User=="Nerea", 2:21]))
p2 = qplot(rating_Maria, rating_Nerea, geom= c("point","smooth"))
r1 <- cor(rating_Maria, rating_Nerea, method = c("pearson"), use = "pairwise.complete.obs")
paste("Correlation between Maria and Nerea is:", r1)
rating_Chris <- as.numeric(as.vector(rdf[rdf$User=="Chris", 2:21]))
rating_Jim <- as.numeric(as.vector(rdf[rdf$User=="Jim", 2:21]))
p3 = qplot(rating_Chris, rating_Jim, geom=c("point","smooth"))
r1 <- cor(rating_Chris, rating_Jim, method = c("pearson"), use = "pairwise.complete.obs")
paste("Correlation between Chris and Jim is:", r1)
grid.arrange(p1, p2, p3, nrow = 1)
# Looking at the graph and correlation figures we can say that:
# There is slightly positive correlation(0.36) between Victoria and Nuria
# There is a slightly negative correlation(-0.3) between Maria and Nerea
# There is a high correlation between (0.825) between Chris and Jim
trdf <- t(rdf)            ## Traspose the data frame
colnames(trdf) = trdf[1,]  ## Assign the column names
trdf =trdf[-1,]            ## Eliminate first row
## Convert it to data frame in order to transform values to numeric
d2 <- data.frame(trdf)
d2[1:20] <- lapply(d2[1:20], function(x) as.numeric(as.character(x)))
d2.1=d2[1:20]
# Keep out movies that Victoria hasn't watched
d2.v=d2.1[complete.cases(d2.1$Victoria != "NA"),,drop=F]
## Correlation table
d3=cor(d2.1[,unlist(lapply(d2.1,is.numeric))],use="pairwise.complete.obs")
## Select the movies that Victoria hasn't watch yet
MOVIES=rownames(d2.1[is.na(d2.1$Victoria == "NA"),15,drop=F])
## User ratings for all the movies that Victoria hasn't watch yet
dff=rdf[1:20,c(MOVIES)]
## Calculate the mean for all the users
user_mean = rowMeans(rdf[,2:21],na.rm=T)
## Calculate the difference between the Rating of each movie with its respective User Mean
almostdiff=cbind(dff,user_mean)
diff = (almostdiff-almostdiff$user_mean)[-15,-8]
## Multiply the previous Difference by each user Correlation that Victoria.
almostdiff2=cbind(diff,corr=(d3[,15])[-15])
df3=colSums((almostdiff2*almostdiff2$corr)[-8],na.rm=T)
## Divide it by the Sum of all the Pearson correlations
df3=df3/sum(abs((d3[,15])[-15]),na.rm=T)
## Finally sum all the movie results with Victoria rating's mean
df3=df3+ mean(d2.v$Victoria)
head(sort(df3,decreasing=T),n=5)
ratingVictoria <- as.numeric(as.vector(rdf[rdf$User=="Victoria", 2:21])) # Extract Victoria's ratings
user_names <- rdf[rdf$User!="Victoria", 1] # Get the names of all the usrers other than Victoria
corr_vector = vector(mode="integer", length=20)
# Loop throw the dataframe and find the correlation between Victoria and everyone else
for(i in 1:nrow(rdf)) {
if(rdf[i,1]=="Victoria") {
corr_vector[i] = -1
} else {
userrating <- as.numeric(as.vector(rdf[i, 2:21]))
corr_vector[i] = cor(ratingVictoria, userrating, method = c("pearson"), use = "pairwise.complete.obs")
}
}
# Add a new column that will contain the correlation between Victoria and everyone else
victoriaVsOthers <- rdf %>% mutate(victoriacorr = corr_vector)
#Arrange the dataframe in descending order based on correlation between Victoria and everyone else
trdf_d_by_pcgt4 <- victoriaVsOthers %>% select(User, victoriacorr) %>% arrange(desc(victoriaVsOthers$victoriacorr))
# print the top 5 correlated users
print(trdf_d_by_pcgt4[1:5,])
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(dplyr)
library(plyr)
transpose_data_frame <- function(df) {
t_df <- transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
return (t_df)
}
rdf <- data.frame(read.csv("critics.csv", header = TRUE, stringsAsFactors = FALSE))
mnames <- colnames(rdf) # contain the movie names
mnames <- mnames[-1] #first one is not a movie name
unames <- rdf[,1] # contain the usernames
#remove the first column from the data frame - thats useless
rdf1 = rdf
rdf <- rdf[, -1]
avgrating <- colMeans(rdf, na.rm = TRUE)
# append average rating to the data frame as a row
rdfwithmean <- rbind(rdf, avgrating)
#transpose the data frame now
trdf <- transpose_data_frame(rdfwithmean)
# Add the movie names to the transposed data frame
trdf <- trdf %>% mutate(Movie = mnames)
# Column 21 contains the average rating now; arrange the data frame indescending order on the basis of mean rating
trdfd <- trdf %>% select(`21`, Movie) %>% arrange(desc(trdf$`21`))
#print top 5 movies on the basis of average rating
print(trdfd[1:5,])
# this function will proportion of movies that have 4 or 5 stars
get_pc_4_or_5 <- function(ratings1) {
t <- table(ratings1)
return (sum(t[names(t) >= 4]) / sum(!is.na(ratings1)))
}
# get the total no. of movies
numofmovies = nrow(trdf)
#store the % of ratings that have rating are >=4
pcmorethan4 = vector(mode = "double", length = numofmovies)
for (row in 1:numofmovies) {
ratings = trdf[row, 1:20]
pcmorethan4[row] <- get_pc_4_or_5(unlist(ratings))
}
print(pcmorethan4)
# Add a new column that would contain the % ratings >=4 for every rating
trdf <- trdf %>% mutate("PCgt4" = pcmorethan4)
# arrange the dataframe in descending order of % ratings >=4 and print
trdf_d_by_pcgt4 <- trdf %>% select(PCgt4, Movie) %>% arrange(desc(trdf$PCgt4))
print(trdf_d_by_pcgt4[1:5,])
# get the no. of movies
numofmovies = nrow(trdf)
# Get the no. of ratimgs for each movie; use a loop
no_of_ratings = vector(mode = "integer", length = numofmovies)
for (row in 1:numofmovies) {
ratings = trdf[row, 1:20]
no_of_ratings[row] <- sum(!is.na(ratings))
}
print(no_of_ratings)
# Add a new col that contains the total no. of ratings for each movie
trdf <- trdf %>% mutate("NoOfRatings" = no_of_ratings)
# sort the dataframe on the basis of total no. of ratings for each movie and print
trdf_d_by_NoOfRtgs <- trdf %>% select(NoOfRatings, Movie) %>% arrange(desc(trdf$NoOfRatings))
print(trdf_d_by_NoOfRtgs[1:5,])
#rdf1=read.csv("critics.csv")
top5 = rdf1[complete.cases(rdf1$Star.Wars.IV...A.New.Hope), ] #We identify the complete rated critics of the movies
top5 = top5[2:20] != "NA"  #We exclude the NAs from the data, so the movies which are not rated
#View(cm5)
top5.1 = colSums(top5, na.rm = T) # We sum up the rating of each movie
top5.1 = sort(top5.1, decreasing = T) # We sort in descending order
top5.1 = head(top5.1, n = 6) # We finally select the top 6 movies rating, 6 because we need to keep as well "Star Wars IV...a New Hope"
top5.1 = data.frame(common=head(top5.1)) # The Data are transformed into a data frame
#View(cm5.1) # Let's see the rating of the top 6 movie rating
cm6 = top5.1[2:6,,drop=F]/(top5.1[1,]) # Last step is to calculate the percentage of the other movie raters who also rated that movie
head(cm6, n = 5) # We print the Top Occurences
# This function too calculates the ratings, but using a conventional approach; Please ignore this. However this one
# finds the top5 for each and every movie
# create a 20*20 matrix that contains the association confidence between each movies
MY_AND <- function(...) Reduce("&", list(...))
no_of_movies = nrow(trdf)
masoc = matrix(data=c(0), nrow=no_of_movies, ncol=no_of_movies)
no_of_critics = 20  #Find a better way of doing this
for(i in 1:no_of_movies) {
for(j in 1:no_of_movies) {
if(i==j) {
masoc[i,j] = -1
} else {
x <- !is.na(trdf[i, 1:no_of_critics])
y <- !is.na(trdf[j, 1:no_of_critics])
#masoc[i,j]=(sum(MY_AND(x,y))) / (sum(x))
masoc[j,i]=(sum(MY_AND(x,y))) / (sum(x))
}
}
}
movie_names <- rownames(trdf)
col_names <- c("movie names", movie_names)
assoc_matrix <- masoc
assoc_matrix <- data.frame(cbind(movie_names, assoc_matrix))
colnames(assoc_matrix) <- col_names
get_most_recommended<-function(amatrix, movie_name) {
#movie_names <- amatrix[, 1]
#for(movie in movie_names) {
movie_cor = amatrix[, c("movie names", movie_name)]
print("=================================\n")
print(movie_name)
print("=================================\n")
#movie_cor_d <- movie_cor %>% arrange(desc(movie_name))
movie_cor_d <- movie_cor[order(movie_cor[,movie_name], decreasing = TRUE),]
print(movie_cor_d[1:5,])
#}
}
movie_names <- assoc_matrix[, 1]
#get_most_recommended(assoc_matrix, "Gladiator")
for(movie in movie_names) {
get_most_recommended(assoc_matrix, movie)
}
likedBabeDf=rdf1[complete.cases(rdf$Babe), ] # We select the rated critics from Babe movie
likedBabeDf=likedBabeDf[(likedBabeDf$Babe==4|likedBabeDf$Babe==5),] # We select only critics with rating 4 or 5
#View(likedBabeDf) # Let's view the Data
likedBabeDf1=likedBabeDf[-which(colnames(likedBabeDf)=="Babe")] # At that point we don'T need anymore the Babe rating
likedBabeDf1=likedBabeDf1[-which(colnames(likedBabeDf1)=="User")] # We don't need the name of the rater
#View(likedBabeDf1) # Let's view the data
likedBabeDf2 = colMeans(likedBabeDf1, na.rm=T) # Let's calculate the average rating
likedBabeDf2 = sort(likedBabeDf2, decreasing = T) # We sort in descending order
likedBabeDf2 = head(likedBabeDf2, n = 5) # We select the top 5 movies
head(likedBabeDf2) # We print out the movies better rated of people who liked Babe with 4 or 5 stars.
